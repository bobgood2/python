//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Python3Parser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Python.Antlr {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class Python3Parser : Python3ParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INDENT=1, DEDENT=2, STRING=3, NUMBER=4, INTEGER=5, AND=6, AS=7, ASSERT=8, 
		ASYNC=9, AWAIT=10, BREAK=11, CASE=12, CLASS=13, CONTINUE=14, DEF=15, DEL=16, 
		ELIF=17, ELSE=18, EXCEPT=19, FALSE=20, FINALLY=21, FOR=22, FROM=23, GLOBAL=24, 
		IF=25, IMPORT=26, IN=27, IS=28, LAMBDA=29, MATCH=30, NONE=31, NONLOCAL=32, 
		NOT=33, OR=34, PASS=35, RAISE=36, RETURN=37, TRUE=38, TRY=39, UNDERSCORE=40, 
		WHILE=41, WITH=42, YIELD=43, NEWLINE=44, NAME=45, STRING_LITERAL=46, BYTES_LITERAL=47, 
		DECIMAL_INTEGER=48, OCT_INTEGER=49, HEX_INTEGER=50, BIN_INTEGER=51, FLOAT_NUMBER=52, 
		IMAG_NUMBER=53, DOT=54, ELLIPSIS=55, STAR=56, OPEN_PAREN=57, CLOSE_PAREN=58, 
		COMMA=59, COLON=60, SEMI_COLON=61, POWER=62, ASSIGN=63, OPEN_BRACK=64, 
		CLOSE_BRACK=65, OR_OP=66, XOR=67, AND_OP=68, LEFT_SHIFT=69, RIGHT_SHIFT=70, 
		ADD=71, MINUS=72, DIV=73, MOD=74, IDIV=75, NOT_OP=76, OPEN_BRACE=77, CLOSE_BRACE=78, 
		LESS_THAN=79, GREATER_THAN=80, EQUALS=81, GT_EQ=82, LT_EQ=83, NOT_EQ_1=84, 
		NOT_EQ_2=85, AT=86, ARROW=87, ADD_ASSIGN=88, SUB_ASSIGN=89, MULT_ASSIGN=90, 
		AT_ASSIGN=91, DIV_ASSIGN=92, MOD_ASSIGN=93, AND_ASSIGN=94, OR_ASSIGN=95, 
		XOR_ASSIGN=96, LEFT_SHIFT_ASSIGN=97, RIGHT_SHIFT_ASSIGN=98, POWER_ASSIGN=99, 
		IDIV_ASSIGN=100, SKIP_=101, UNKNOWN_CHAR=102;
	public const int
		RULE_single_input = 0, RULE_file_input = 1, RULE_eval_input = 2, RULE_decorator = 3, 
		RULE_decorators = 4, RULE_decorated = 5, RULE_async_funcdef = 6, RULE_funcdef = 7, 
		RULE_parameters = 8, RULE_typedargslist = 9, RULE_tfpdef = 10, RULE_varargslist = 11, 
		RULE_vfpdef = 12, RULE_stmt = 13, RULE_simple_stmts = 14, RULE_simple_stmt = 15, 
		RULE_expr_stmt = 16, RULE_annassign = 17, RULE_testlist_star_expr = 18, 
		RULE_augassign = 19, RULE_del_stmt = 20, RULE_pass_stmt = 21, RULE_flow_stmt = 22, 
		RULE_break_stmt = 23, RULE_continue_stmt = 24, RULE_return_stmt = 25, 
		RULE_yield_stmt = 26, RULE_raise_stmt = 27, RULE_import_stmt = 28, RULE_import_name = 29, 
		RULE_import_from = 30, RULE_import_as_name = 31, RULE_dotted_as_name = 32, 
		RULE_import_as_names = 33, RULE_dotted_as_names = 34, RULE_dotted_name = 35, 
		RULE_global_stmt = 36, RULE_nonlocal_stmt = 37, RULE_assert_stmt = 38, 
		RULE_compound_stmt = 39, RULE_async_stmt = 40, RULE_if_stmt = 41, RULE_while_stmt = 42, 
		RULE_for_stmt = 43, RULE_try_stmt = 44, RULE_with_stmt = 45, RULE_with_item = 46, 
		RULE_except_clause = 47, RULE_block = 48, RULE_match_stmt = 49, RULE_subject_expr = 50, 
		RULE_star_named_expressions = 51, RULE_star_named_expression = 52, RULE_case_block = 53, 
		RULE_guard = 54, RULE_patterns = 55, RULE_pattern = 56, RULE_as_pattern = 57, 
		RULE_or_pattern = 58, RULE_closed_pattern = 59, RULE_literal_pattern = 60, 
		RULE_literal_expr = 61, RULE_complex_number = 62, RULE_signed_number = 63, 
		RULE_signed_real_number = 64, RULE_real_number = 65, RULE_imaginary_number = 66, 
		RULE_capture_pattern = 67, RULE_pattern_capture_target = 68, RULE_wildcard_pattern = 69, 
		RULE_value_pattern = 70, RULE_attr = 71, RULE_name_or_attr = 72, RULE_group_pattern = 73, 
		RULE_sequence_pattern = 74, RULE_open_sequence_pattern = 75, RULE_maybe_sequence_pattern = 76, 
		RULE_maybe_star_pattern = 77, RULE_star_pattern = 78, RULE_mapping_pattern = 79, 
		RULE_items_pattern = 80, RULE_key_value_pattern = 81, RULE_double_star_pattern = 82, 
		RULE_class_pattern = 83, RULE_positional_patterns = 84, RULE_keyword_patterns = 85, 
		RULE_keyword_pattern = 86, RULE_test = 87, RULE_test_nocond = 88, RULE_lambdef = 89, 
		RULE_lambdef_nocond = 90, RULE_or_test = 91, RULE_and_test = 92, RULE_not_test = 93, 
		RULE_comparison = 94, RULE_comp_op = 95, RULE_star_expr = 96, RULE_expr = 97, 
		RULE_atom_expr = 98, RULE_atom = 99, RULE_name = 100, RULE_testlist_comp = 101, 
		RULE_trailer = 102, RULE_subscriptlist = 103, RULE_subscript_ = 104, RULE_sliceop = 105, 
		RULE_exprlist = 106, RULE_testlist = 107, RULE_dictorsetmaker = 108, RULE_classdef = 109, 
		RULE_arglist = 110, RULE_argument = 111, RULE_comp_iter = 112, RULE_comp_for = 113, 
		RULE_comp_if = 114, RULE_encoding_decl = 115, RULE_yield_expr = 116, RULE_yield_arg = 117, 
		RULE_strings = 118;
	public static readonly string[] ruleNames = {
		"single_input", "file_input", "eval_input", "decorator", "decorators", 
		"decorated", "async_funcdef", "funcdef", "parameters", "typedargslist", 
		"tfpdef", "varargslist", "vfpdef", "stmt", "simple_stmts", "simple_stmt", 
		"expr_stmt", "annassign", "testlist_star_expr", "augassign", "del_stmt", 
		"pass_stmt", "flow_stmt", "break_stmt", "continue_stmt", "return_stmt", 
		"yield_stmt", "raise_stmt", "import_stmt", "import_name", "import_from", 
		"import_as_name", "dotted_as_name", "import_as_names", "dotted_as_names", 
		"dotted_name", "global_stmt", "nonlocal_stmt", "assert_stmt", "compound_stmt", 
		"async_stmt", "if_stmt", "while_stmt", "for_stmt", "try_stmt", "with_stmt", 
		"with_item", "except_clause", "block", "match_stmt", "subject_expr", "star_named_expressions", 
		"star_named_expression", "case_block", "guard", "patterns", "pattern", 
		"as_pattern", "or_pattern", "closed_pattern", "literal_pattern", "literal_expr", 
		"complex_number", "signed_number", "signed_real_number", "real_number", 
		"imaginary_number", "capture_pattern", "pattern_capture_target", "wildcard_pattern", 
		"value_pattern", "attr", "name_or_attr", "group_pattern", "sequence_pattern", 
		"open_sequence_pattern", "maybe_sequence_pattern", "maybe_star_pattern", 
		"star_pattern", "mapping_pattern", "items_pattern", "key_value_pattern", 
		"double_star_pattern", "class_pattern", "positional_patterns", "keyword_patterns", 
		"keyword_pattern", "test", "test_nocond", "lambdef", "lambdef_nocond", 
		"or_test", "and_test", "not_test", "comparison", "comp_op", "star_expr", 
		"expr", "atom_expr", "atom", "name", "testlist_comp", "trailer", "subscriptlist", 
		"subscript_", "sliceop", "exprlist", "testlist", "dictorsetmaker", "classdef", 
		"arglist", "argument", "comp_iter", "comp_for", "comp_if", "encoding_decl", 
		"yield_expr", "yield_arg", "strings"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'and'", "'as'", "'assert'", "'async'", 
		"'await'", "'break'", "'case'", "'class'", "'continue'", "'def'", "'del'", 
		"'elif'", "'else'", "'except'", "'False'", "'finally'", "'for'", "'from'", 
		"'global'", "'if'", "'import'", "'in'", "'is'", "'lambda'", "'match'", 
		"'None'", "'nonlocal'", "'not'", "'or'", "'pass'", "'raise'", "'return'", 
		"'True'", "'try'", "'_'", "'while'", "'with'", "'yield'", null, null, 
		null, null, null, null, null, null, null, null, "'.'", "'...'", "'*'", 
		"'('", "')'", "','", "':'", "';'", "'**'", "'='", "'['", "']'", "'|'", 
		"'^'", "'&'", "'<<'", "'>>'", "'+'", "'-'", "'/'", "'%'", "'//'", "'~'", 
		"'{'", "'}'", "'<'", "'>'", "'=='", "'>='", "'<='", "'<>'", "'!='", "'@'", 
		"'->'", "'+='", "'-='", "'*='", "'@='", "'/='", "'%='", "'&='", "'|='", 
		"'^='", "'<<='", "'>>='", "'**='", "'//='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INDENT", "DEDENT", "STRING", "NUMBER", "INTEGER", "AND", "AS", 
		"ASSERT", "ASYNC", "AWAIT", "BREAK", "CASE", "CLASS", "CONTINUE", "DEF", 
		"DEL", "ELIF", "ELSE", "EXCEPT", "FALSE", "FINALLY", "FOR", "FROM", "GLOBAL", 
		"IF", "IMPORT", "IN", "IS", "LAMBDA", "MATCH", "NONE", "NONLOCAL", "NOT", 
		"OR", "PASS", "RAISE", "RETURN", "TRUE", "TRY", "UNDERSCORE", "WHILE", 
		"WITH", "YIELD", "NEWLINE", "NAME", "STRING_LITERAL", "BYTES_LITERAL", 
		"DECIMAL_INTEGER", "OCT_INTEGER", "HEX_INTEGER", "BIN_INTEGER", "FLOAT_NUMBER", 
		"IMAG_NUMBER", "DOT", "ELLIPSIS", "STAR", "OPEN_PAREN", "CLOSE_PAREN", 
		"COMMA", "COLON", "SEMI_COLON", "POWER", "ASSIGN", "OPEN_BRACK", "CLOSE_BRACK", 
		"OR_OP", "XOR", "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT", "ADD", "MINUS", 
		"DIV", "MOD", "IDIV", "NOT_OP", "OPEN_BRACE", "CLOSE_BRACE", "LESS_THAN", 
		"GREATER_THAN", "EQUALS", "GT_EQ", "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", "AT", 
		"ARROW", "ADD_ASSIGN", "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN", 
		"MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "LEFT_SHIFT_ASSIGN", 
		"RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", "IDIV_ASSIGN", "SKIP_", "UNKNOWN_CHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Python3Parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static Python3Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Python3Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Python3Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Single_inputContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(Python3Parser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_stmtsContext simple_stmts() {
			return GetRuleContext<Simple_stmtsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Compound_stmtContext compound_stmt() {
			return GetRuleContext<Compound_stmtContext>(0);
		}
		public Single_inputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_input; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterSingle_input(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitSingle_input(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingle_input(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Single_inputContext single_input() {
		Single_inputContext _localctx = new Single_inputContext(Context, State);
		EnterRule(_localctx, 0, RULE_single_input);
		try {
			State = 243;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 238;
				Match(NEWLINE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 239;
				simple_stmts();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 240;
				compound_stmt();
				State = 241;
				Match(NEWLINE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_inputContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Python3Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(Python3Parser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(Python3Parser.NEWLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public File_inputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_input; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterFile_input(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitFile_input(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_input(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_inputContext file_input() {
		File_inputContext _localctx = new File_inputContext(Context, State);
		EnterRule(_localctx, 2, RULE_file_input);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 252271930291384088L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4206977L) != 0)) {
				{
				State = 247;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NEWLINE:
					{
					State = 245;
					Match(NEWLINE);
					}
					break;
				case STRING:
				case NUMBER:
				case ASSERT:
				case ASYNC:
				case AWAIT:
				case BREAK:
				case CLASS:
				case CONTINUE:
				case DEF:
				case DEL:
				case FALSE:
				case FOR:
				case FROM:
				case GLOBAL:
				case IF:
				case IMPORT:
				case LAMBDA:
				case MATCH:
				case NONE:
				case NONLOCAL:
				case NOT:
				case PASS:
				case RAISE:
				case RETURN:
				case TRUE:
				case TRY:
				case UNDERSCORE:
				case WHILE:
				case WITH:
				case YIELD:
				case NAME:
				case ELLIPSIS:
				case STAR:
				case OPEN_PAREN:
				case OPEN_BRACK:
				case ADD:
				case MINUS:
				case NOT_OP:
				case OPEN_BRACE:
				case AT:
					{
					State = 246;
					stmt();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 252;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Eval_inputContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TestlistContext testlist() {
			return GetRuleContext<TestlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Python3Parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(Python3Parser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(Python3Parser.NEWLINE, i);
		}
		public Eval_inputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eval_input; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterEval_input(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitEval_input(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEval_input(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Eval_inputContext eval_input() {
		Eval_inputContext _localctx = new Eval_inputContext(Context, State);
		EnterRule(_localctx, 4, RULE_eval_input);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			testlist();
			State = 258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NEWLINE) {
				{
				{
				State = 255;
				Match(NEWLINE);
				}
				}
				State = 260;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 261;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecoratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(Python3Parser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Dotted_nameContext dotted_name() {
			return GetRuleContext<Dotted_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(Python3Parser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(Python3Parser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(Python3Parser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArglistContext arglist() {
			return GetRuleContext<ArglistContext>(0);
		}
		public DecoratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decorator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterDecorator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitDecorator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecorator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecoratorContext decorator() {
		DecoratorContext _localctx = new DecoratorContext(Context, State);
		EnterRule(_localctx, 6, RULE_decorator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			Match(AT);
			State = 264;
			dotted_name();
			State = 270;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAREN) {
				{
				State = 265;
				Match(OPEN_PAREN);
				State = 267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4863924168670839832L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 12673L) != 0)) {
					{
					State = 266;
					arglist();
					}
				}

				State = 269;
				Match(CLOSE_PAREN);
				}
			}

			State = 272;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecoratorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorContext[] decorator() {
			return GetRuleContexts<DecoratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorContext decorator(int i) {
			return GetRuleContext<DecoratorContext>(i);
		}
		public DecoratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decorators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterDecorators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitDecorators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecorators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecoratorsContext decorators() {
		DecoratorsContext _localctx = new DecoratorsContext(Context, State);
		EnterRule(_localctx, 8, RULE_decorators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 274;
				decorator();
				}
				}
				State = 277;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==AT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecoratedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecoratorsContext decorators() {
			return GetRuleContext<DecoratorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassdefContext classdef() {
			return GetRuleContext<ClassdefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncdefContext funcdef() {
			return GetRuleContext<FuncdefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Async_funcdefContext async_funcdef() {
			return GetRuleContext<Async_funcdefContext>(0);
		}
		public DecoratedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decorated; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterDecorated(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitDecorated(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecorated(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecoratedContext decorated() {
		DecoratedContext _localctx = new DecoratedContext(Context, State);
		EnterRule(_localctx, 10, RULE_decorated);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			decorators();
			State = 283;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLASS:
				{
				State = 280;
				classdef();
				}
				break;
			case DEF:
				{
				State = 281;
				funcdef();
				}
				break;
			case ASYNC:
				{
				State = 282;
				async_funcdef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Async_funcdefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNC() { return GetToken(Python3Parser.ASYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncdefContext funcdef() {
			return GetRuleContext<FuncdefContext>(0);
		}
		public Async_funcdefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_async_funcdef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterAsync_funcdef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitAsync_funcdef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsync_funcdef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Async_funcdefContext async_funcdef() {
		Async_funcdefContext _localctx = new Async_funcdefContext(Context, State);
		EnterRule(_localctx, 12, RULE_async_funcdef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			Match(ASYNC);
			State = 286;
			funcdef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncdefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEF() { return GetToken(Python3Parser.DEF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Python3Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(Python3Parser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test() {
			return GetRuleContext<TestContext>(0);
		}
		public FuncdefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcdef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterFuncdef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitFuncdef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncdef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncdefContext funcdef() {
		FuncdefContext _localctx = new FuncdefContext(Context, State);
		EnterRule(_localctx, 14, RULE_funcdef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			Match(DEF);
			State = 289;
			name();
			State = 290;
			parameters();
			State = 293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ARROW) {
				{
				State = 291;
				Match(ARROW);
				State = 292;
				test();
				}
			}

			State = 295;
			Match(COLON);
			State = 296;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(Python3Parser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(Python3Parser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypedargslistContext typedargslist() {
			return GetRuleContext<TypedargslistContext>(0);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 16, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298;
			Match(OPEN_PAREN);
			State = 300;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4683779897422774272L) != 0)) {
				{
				State = 299;
				typedargslist();
				}
			}

			State = 302;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedargslistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TfpdefContext[] tfpdef() {
			return GetRuleContexts<TfpdefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TfpdefContext tfpdef(int i) {
			return GetRuleContext<TfpdefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(Python3Parser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(Python3Parser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASSIGN() { return GetTokens(Python3Parser.ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN(int i) {
			return GetToken(Python3Parser.ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext[] test() {
			return GetRuleContexts<TestContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test(int i) {
			return GetRuleContext<TestContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		public TypedargslistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedargslist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterTypedargslist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitTypedargslist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypedargslist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypedargslistContext typedargslist() {
		TypedargslistContext _localctx = new TypedargslistContext(Context, State);
		EnterRule(_localctx, 18, RULE_typedargslist);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MATCH:
			case UNDERSCORE:
			case NAME:
				{
				State = 304;
				tfpdef();
				State = 307;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 305;
					Match(ASSIGN);
					State = 306;
					test();
					}
				}

				State = 317;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 309;
						Match(COMMA);
						State = 310;
						tfpdef();
						State = 313;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==ASSIGN) {
							{
							State = 311;
							Match(ASSIGN);
							State = 312;
							test();
							}
						}

						}
						} 
					}
					State = 319;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				}
				State = 353;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 320;
					Match(COMMA);
					State = 351;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case STAR:
						{
						State = 321;
						Match(STAR);
						State = 323;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 36284957458432L) != 0)) {
							{
							State = 322;
							tfpdef();
							}
						}

						State = 333;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 325;
								Match(COMMA);
								State = 326;
								tfpdef();
								State = 329;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==ASSIGN) {
									{
									State = 327;
									Match(ASSIGN);
									State = 328;
									test();
									}
								}

								}
								} 
							}
							State = 335;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
						}
						State = 344;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 336;
							Match(COMMA);
							State = 342;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==POWER) {
								{
								State = 337;
								Match(POWER);
								State = 338;
								tfpdef();
								State = 340;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 339;
									Match(COMMA);
									}
								}

								}
							}

							}
						}

						}
						break;
					case POWER:
						{
						State = 346;
						Match(POWER);
						State = 347;
						tfpdef();
						State = 349;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 348;
							Match(COMMA);
							}
						}

						}
						break;
					case CLOSE_PAREN:
						break;
					default:
						break;
					}
					}
				}

				}
				break;
			case STAR:
				{
				State = 355;
				Match(STAR);
				State = 357;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 36284957458432L) != 0)) {
					{
					State = 356;
					tfpdef();
					}
				}

				State = 367;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 359;
						Match(COMMA);
						State = 360;
						tfpdef();
						State = 363;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==ASSIGN) {
							{
							State = 361;
							Match(ASSIGN);
							State = 362;
							test();
							}
						}

						}
						} 
					}
					State = 369;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
				}
				State = 378;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 370;
					Match(COMMA);
					State = 376;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==POWER) {
						{
						State = 371;
						Match(POWER);
						State = 372;
						tfpdef();
						State = 374;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 373;
							Match(COMMA);
							}
						}

						}
					}

					}
				}

				}
				break;
			case POWER:
				{
				State = 380;
				Match(POWER);
				State = 381;
				tfpdef();
				State = 383;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 382;
					Match(COMMA);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TfpdefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Python3Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test() {
			return GetRuleContext<TestContext>(0);
		}
		public TfpdefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tfpdef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterTfpdef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitTfpdef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTfpdef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TfpdefContext tfpdef() {
		TfpdefContext _localctx = new TfpdefContext(Context, State);
		EnterRule(_localctx, 20, RULE_tfpdef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387;
			name();
			State = 390;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 388;
				Match(COLON);
				State = 389;
				test();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarargslistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VfpdefContext[] vfpdef() {
			return GetRuleContexts<VfpdefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VfpdefContext vfpdef(int i) {
			return GetRuleContext<VfpdefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(Python3Parser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(Python3Parser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASSIGN() { return GetTokens(Python3Parser.ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN(int i) {
			return GetToken(Python3Parser.ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext[] test() {
			return GetRuleContexts<TestContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test(int i) {
			return GetRuleContext<TestContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		public VarargslistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varargslist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterVarargslist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitVarargslist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarargslist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarargslistContext varargslist() {
		VarargslistContext _localctx = new VarargslistContext(Context, State);
		EnterRule(_localctx, 22, RULE_varargslist);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 473;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MATCH:
			case UNDERSCORE:
			case NAME:
				{
				State = 392;
				vfpdef();
				State = 395;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGN) {
					{
					State = 393;
					Match(ASSIGN);
					State = 394;
					test();
					}
				}

				State = 405;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 397;
						Match(COMMA);
						State = 398;
						vfpdef();
						State = 401;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==ASSIGN) {
							{
							State = 399;
							Match(ASSIGN);
							State = 400;
							test();
							}
						}

						}
						} 
					}
					State = 407;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
				}
				State = 441;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 408;
					Match(COMMA);
					State = 439;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case STAR:
						{
						State = 409;
						Match(STAR);
						State = 411;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 36284957458432L) != 0)) {
							{
							State = 410;
							vfpdef();
							}
						}

						State = 421;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 413;
								Match(COMMA);
								State = 414;
								vfpdef();
								State = 417;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==ASSIGN) {
									{
									State = 415;
									Match(ASSIGN);
									State = 416;
									test();
									}
								}

								}
								} 
							}
							State = 423;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
						}
						State = 432;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 424;
							Match(COMMA);
							State = 430;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==POWER) {
								{
								State = 425;
								Match(POWER);
								State = 426;
								vfpdef();
								State = 428;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
								if (_la==COMMA) {
									{
									State = 427;
									Match(COMMA);
									}
								}

								}
							}

							}
						}

						}
						break;
					case POWER:
						{
						State = 434;
						Match(POWER);
						State = 435;
						vfpdef();
						State = 437;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 436;
							Match(COMMA);
							}
						}

						}
						break;
					case COLON:
						break;
					default:
						break;
					}
					}
				}

				}
				break;
			case STAR:
				{
				State = 443;
				Match(STAR);
				State = 445;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 36284957458432L) != 0)) {
					{
					State = 444;
					vfpdef();
					}
				}

				State = 455;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 447;
						Match(COMMA);
						State = 448;
						vfpdef();
						State = 451;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==ASSIGN) {
							{
							State = 449;
							Match(ASSIGN);
							State = 450;
							test();
							}
						}

						}
						} 
					}
					State = 457;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
				}
				State = 466;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 458;
					Match(COMMA);
					State = 464;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==POWER) {
						{
						State = 459;
						Match(POWER);
						State = 460;
						vfpdef();
						State = 462;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 461;
							Match(COMMA);
							}
						}

						}
					}

					}
				}

				}
				break;
			case POWER:
				{
				State = 468;
				Match(POWER);
				State = 469;
				vfpdef();
				State = 471;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 470;
					Match(COMMA);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VfpdefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public VfpdefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vfpdef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterVfpdef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitVfpdef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVfpdef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VfpdefContext vfpdef() {
		VfpdefContext _localctx = new VfpdefContext(Context, State);
		EnterRule(_localctx, 24, RULE_vfpdef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 475;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_stmtsContext simple_stmts() {
			return GetRuleContext<Simple_stmtsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Compound_stmtContext compound_stmt() {
			return GetRuleContext<Compound_stmtContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 26, RULE_stmt);
		try {
			State = 479;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 477;
				simple_stmts();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 478;
				compound_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_stmtsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_stmtContext[] simple_stmt() {
			return GetRuleContexts<Simple_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_stmtContext simple_stmt(int i) {
			return GetRuleContext<Simple_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(Python3Parser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI_COLON() { return GetTokens(Python3Parser.SEMI_COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI_COLON(int i) {
			return GetToken(Python3Parser.SEMI_COLON, i);
		}
		public Simple_stmtsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_stmts; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterSimple_stmts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitSimple_stmts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_stmts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_stmtsContext simple_stmts() {
		Simple_stmtsContext _localctx = new Simple_stmtsContext(Context, State);
		EnterRule(_localctx, 28, RULE_simple_stmts);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 481;
			simple_stmt();
			State = 486;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 482;
					Match(SEMI_COLON);
					State = 483;
					simple_stmt();
					}
					} 
				}
				State = 488;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			}
			State = 490;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI_COLON) {
				{
				State = 489;
				Match(SEMI_COLON);
				}
			}

			State = 492;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr_stmtContext expr_stmt() {
			return GetRuleContext<Expr_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Del_stmtContext del_stmt() {
			return GetRuleContext<Del_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pass_stmtContext pass_stmt() {
			return GetRuleContext<Pass_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Flow_stmtContext flow_stmt() {
			return GetRuleContext<Flow_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_stmtContext import_stmt() {
			return GetRuleContext<Import_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Global_stmtContext global_stmt() {
			return GetRuleContext<Global_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nonlocal_stmtContext nonlocal_stmt() {
			return GetRuleContext<Nonlocal_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assert_stmtContext assert_stmt() {
			return GetRuleContext<Assert_stmtContext>(0);
		}
		public Simple_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterSimple_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitSimple_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_stmtContext simple_stmt() {
		Simple_stmtContext _localctx = new Simple_stmtContext(Context, State);
		EnterRule(_localctx, 30, RULE_simple_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 502;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case NUMBER:
			case AWAIT:
			case FALSE:
			case LAMBDA:
			case MATCH:
			case NONE:
			case NOT:
			case TRUE:
			case UNDERSCORE:
			case NAME:
			case ELLIPSIS:
			case STAR:
			case OPEN_PAREN:
			case OPEN_BRACK:
			case ADD:
			case MINUS:
			case NOT_OP:
			case OPEN_BRACE:
				{
				State = 494;
				expr_stmt();
				}
				break;
			case DEL:
				{
				State = 495;
				del_stmt();
				}
				break;
			case PASS:
				{
				State = 496;
				pass_stmt();
				}
				break;
			case BREAK:
			case CONTINUE:
			case RAISE:
			case RETURN:
			case YIELD:
				{
				State = 497;
				flow_stmt();
				}
				break;
			case FROM:
			case IMPORT:
				{
				State = 498;
				import_stmt();
				}
				break;
			case GLOBAL:
				{
				State = 499;
				global_stmt();
				}
				break;
			case NONLOCAL:
				{
				State = 500;
				nonlocal_stmt();
				}
				break;
			case ASSERT:
				{
				State = 501;
				assert_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Testlist_star_exprContext[] testlist_star_expr() {
			return GetRuleContexts<Testlist_star_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Testlist_star_exprContext testlist_star_expr(int i) {
			return GetRuleContext<Testlist_star_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnassignContext annassign() {
			return GetRuleContext<AnnassignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AugassignContext augassign() {
			return GetRuleContext<AugassignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Yield_exprContext[] yield_expr() {
			return GetRuleContexts<Yield_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Yield_exprContext yield_expr(int i) {
			return GetRuleContext<Yield_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestlistContext testlist() {
			return GetRuleContext<TestlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ASSIGN() { return GetTokens(Python3Parser.ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN(int i) {
			return GetToken(Python3Parser.ASSIGN, i);
		}
		public Expr_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterExpr_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitExpr_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expr_stmtContext expr_stmt() {
		Expr_stmtContext _localctx = new Expr_stmtContext(Context, State);
		EnterRule(_localctx, 32, RULE_expr_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 504;
			testlist_star_expr();
			State = 521;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLON:
				{
				State = 505;
				annassign();
				}
				break;
			case ADD_ASSIGN:
			case SUB_ASSIGN:
			case MULT_ASSIGN:
			case AT_ASSIGN:
			case DIV_ASSIGN:
			case MOD_ASSIGN:
			case AND_ASSIGN:
			case OR_ASSIGN:
			case XOR_ASSIGN:
			case LEFT_SHIFT_ASSIGN:
			case RIGHT_SHIFT_ASSIGN:
			case POWER_ASSIGN:
			case IDIV_ASSIGN:
				{
				State = 506;
				augassign();
				State = 509;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case YIELD:
					{
					State = 507;
					yield_expr();
					}
					break;
				case STRING:
				case NUMBER:
				case AWAIT:
				case FALSE:
				case LAMBDA:
				case MATCH:
				case NONE:
				case NOT:
				case TRUE:
				case UNDERSCORE:
				case NAME:
				case ELLIPSIS:
				case OPEN_PAREN:
				case OPEN_BRACK:
				case ADD:
				case MINUS:
				case NOT_OP:
				case OPEN_BRACE:
					{
					State = 508;
					testlist();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NEWLINE:
			case SEMI_COLON:
			case ASSIGN:
				{
				State = 518;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ASSIGN) {
					{
					{
					State = 511;
					Match(ASSIGN);
					State = 514;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case YIELD:
						{
						State = 512;
						yield_expr();
						}
						break;
					case STRING:
					case NUMBER:
					case AWAIT:
					case FALSE:
					case LAMBDA:
					case MATCH:
					case NONE:
					case NOT:
					case TRUE:
					case UNDERSCORE:
					case NAME:
					case ELLIPSIS:
					case STAR:
					case OPEN_PAREN:
					case OPEN_BRACK:
					case ADD:
					case MINUS:
					case NOT_OP:
					case OPEN_BRACE:
						{
						State = 513;
						testlist_star_expr();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					State = 520;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnassignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Python3Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TestContext[] test() {
			return GetRuleContexts<TestContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test(int i) {
			return GetRuleContext<TestContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(Python3Parser.ASSIGN, 0); }
		public AnnassignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annassign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterAnnassign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitAnnassign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnassign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnassignContext annassign() {
		AnnassignContext _localctx = new AnnassignContext(Context, State);
		EnterRule(_localctx, 34, RULE_annassign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 523;
			Match(COLON);
			State = 524;
			test();
			State = 527;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 525;
				Match(ASSIGN);
				State = 526;
				test();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Testlist_star_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TestContext[] test() {
			return GetRuleContexts<TestContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test(int i) {
			return GetRuleContext<TestContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Star_exprContext[] star_expr() {
			return GetRuleContexts<Star_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Star_exprContext star_expr(int i) {
			return GetRuleContext<Star_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		public Testlist_star_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testlist_star_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterTestlist_star_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitTestlist_star_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestlist_star_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Testlist_star_exprContext testlist_star_expr() {
		Testlist_star_exprContext _localctx = new Testlist_star_exprContext(Context, State);
		EnterRule(_localctx, 36, RULE_testlist_star_expr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 531;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case NUMBER:
			case AWAIT:
			case FALSE:
			case LAMBDA:
			case MATCH:
			case NONE:
			case NOT:
			case TRUE:
			case UNDERSCORE:
			case NAME:
			case ELLIPSIS:
			case OPEN_PAREN:
			case OPEN_BRACK:
			case ADD:
			case MINUS:
			case NOT_OP:
			case OPEN_BRACE:
				{
				State = 529;
				test();
				}
				break;
			case STAR:
				{
				State = 530;
				star_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 540;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 533;
					Match(COMMA);
					State = 536;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case STRING:
					case NUMBER:
					case AWAIT:
					case FALSE:
					case LAMBDA:
					case MATCH:
					case NONE:
					case NOT:
					case TRUE:
					case UNDERSCORE:
					case NAME:
					case ELLIPSIS:
					case OPEN_PAREN:
					case OPEN_BRACK:
					case ADD:
					case MINUS:
					case NOT_OP:
					case OPEN_BRACE:
						{
						State = 534;
						test();
						}
						break;
					case STAR:
						{
						State = 535;
						star_expr();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				State = 542;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			}
			State = 544;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 543;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AugassignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_ASSIGN() { return GetToken(Python3Parser.ADD_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_ASSIGN() { return GetToken(Python3Parser.SUB_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT_ASSIGN() { return GetToken(Python3Parser.MULT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_ASSIGN() { return GetToken(Python3Parser.AT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_ASSIGN() { return GetToken(Python3Parser.DIV_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD_ASSIGN() { return GetToken(Python3Parser.MOD_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_ASSIGN() { return GetToken(Python3Parser.AND_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_ASSIGN() { return GetToken(Python3Parser.OR_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR_ASSIGN() { return GetToken(Python3Parser.XOR_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_SHIFT_ASSIGN() { return GetToken(Python3Parser.LEFT_SHIFT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SHIFT_ASSIGN() { return GetToken(Python3Parser.RIGHT_SHIFT_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER_ASSIGN() { return GetToken(Python3Parser.POWER_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDIV_ASSIGN() { return GetToken(Python3Parser.IDIV_ASSIGN, 0); }
		public AugassignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_augassign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterAugassign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitAugassign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAugassign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AugassignContext augassign() {
		AugassignContext _localctx = new AugassignContext(Context, State);
		EnterRule(_localctx, 38, RULE_augassign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 546;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & 8191L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Del_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEL() { return GetToken(Python3Parser.DEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprlistContext exprlist() {
			return GetRuleContext<ExprlistContext>(0);
		}
		public Del_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_del_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterDel_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitDel_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDel_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Del_stmtContext del_stmt() {
		Del_stmtContext _localctx = new Del_stmtContext(Context, State);
		EnterRule(_localctx, 40, RULE_del_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 548;
			Match(DEL);
			State = 549;
			exprlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pass_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASS() { return GetToken(Python3Parser.PASS, 0); }
		public Pass_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pass_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterPass_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitPass_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPass_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pass_stmtContext pass_stmt() {
		Pass_stmtContext _localctx = new Pass_stmtContext(Context, State);
		EnterRule(_localctx, 42, RULE_pass_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 551;
			Match(PASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Flow_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Break_stmtContext break_stmt() {
			return GetRuleContext<Break_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Continue_stmtContext continue_stmt() {
			return GetRuleContext<Continue_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_stmtContext return_stmt() {
			return GetRuleContext<Return_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Raise_stmtContext raise_stmt() {
			return GetRuleContext<Raise_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Yield_stmtContext yield_stmt() {
			return GetRuleContext<Yield_stmtContext>(0);
		}
		public Flow_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flow_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterFlow_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitFlow_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlow_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Flow_stmtContext flow_stmt() {
		Flow_stmtContext _localctx = new Flow_stmtContext(Context, State);
		EnterRule(_localctx, 44, RULE_flow_stmt);
		try {
			State = 558;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BREAK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 553;
				break_stmt();
				}
				break;
			case CONTINUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 554;
				continue_stmt();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 555;
				return_stmt();
				}
				break;
			case RAISE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 556;
				raise_stmt();
				}
				break;
			case YIELD:
				EnterOuterAlt(_localctx, 5);
				{
				State = 557;
				yield_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Break_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(Python3Parser.BREAK, 0); }
		public Break_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_break_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterBreak_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitBreak_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreak_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Break_stmtContext break_stmt() {
		Break_stmtContext _localctx = new Break_stmtContext(Context, State);
		EnterRule(_localctx, 46, RULE_break_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 560;
			Match(BREAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Continue_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(Python3Parser.CONTINUE, 0); }
		public Continue_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continue_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterContinue_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitContinue_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinue_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Continue_stmtContext continue_stmt() {
		Continue_stmtContext _localctx = new Continue_stmtContext(Context, State);
		EnterRule(_localctx, 48, RULE_continue_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 562;
			Match(CONTINUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(Python3Parser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TestlistContext testlist() {
			return GetRuleContext<TestlistContext>(0);
		}
		public Return_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterReturn_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitReturn_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_stmtContext return_stmt() {
		Return_stmtContext _localctx = new Return_stmtContext(Context, State);
		EnterRule(_localctx, 50, RULE_return_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 564;
			Match(RETURN);
			State = 566;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 180180556205523992L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 12673L) != 0)) {
				{
				State = 565;
				testlist();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Yield_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Yield_exprContext yield_expr() {
			return GetRuleContext<Yield_exprContext>(0);
		}
		public Yield_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yield_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterYield_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitYield_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYield_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Yield_stmtContext yield_stmt() {
		Yield_stmtContext _localctx = new Yield_stmtContext(Context, State);
		EnterRule(_localctx, 52, RULE_yield_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 568;
			yield_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Raise_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAISE() { return GetToken(Python3Parser.RAISE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TestContext[] test() {
			return GetRuleContexts<TestContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test(int i) {
			return GetRuleContext<TestContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(Python3Parser.FROM, 0); }
		public Raise_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raise_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterRaise_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitRaise_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaise_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Raise_stmtContext raise_stmt() {
		Raise_stmtContext _localctx = new Raise_stmtContext(Context, State);
		EnterRule(_localctx, 54, RULE_raise_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 570;
			Match(RAISE);
			State = 576;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 180180556205523992L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 12673L) != 0)) {
				{
				State = 571;
				test();
				State = 574;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM) {
					{
					State = 572;
					Match(FROM);
					State = 573;
					test();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Import_nameContext import_name() {
			return GetRuleContext<Import_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_fromContext import_from() {
			return GetRuleContext<Import_fromContext>(0);
		}
		public Import_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterImport_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitImport_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImport_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Import_stmtContext import_stmt() {
		Import_stmtContext _localctx = new Import_stmtContext(Context, State);
		EnterRule(_localctx, 56, RULE_import_stmt);
		try {
			State = 580;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IMPORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 578;
				import_name();
				}
				break;
			case FROM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 579;
				import_from();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(Python3Parser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Dotted_as_namesContext dotted_as_names() {
			return GetRuleContext<Dotted_as_namesContext>(0);
		}
		public Import_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterImport_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitImport_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImport_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Import_nameContext import_name() {
		Import_nameContext _localctx = new Import_nameContext(Context, State);
		EnterRule(_localctx, 58, RULE_import_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 582;
			Match(IMPORT);
			State = 583;
			dotted_as_names();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_fromContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(Python3Parser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(Python3Parser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Dotted_nameContext dotted_name() {
			return GetRuleContext<Dotted_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(Python3Parser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(Python3Parser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Import_as_namesContext import_as_names() {
			return GetRuleContext<Import_as_namesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(Python3Parser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(Python3Parser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(Python3Parser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELLIPSIS() { return GetTokens(Python3Parser.ELLIPSIS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELLIPSIS(int i) {
			return GetToken(Python3Parser.ELLIPSIS, i);
		}
		public Import_fromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_from; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterImport_from(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitImport_from(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImport_from(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Import_fromContext import_from() {
		Import_fromContext _localctx = new Import_fromContext(Context, State);
		EnterRule(_localctx, 60, RULE_import_from);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 585;
			Match(FROM);
			State = 598;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				{
				State = 589;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOT || _la==ELLIPSIS) {
					{
					{
					State = 586;
					_la = TokenStream.LA(1);
					if ( !(_la==DOT || _la==ELLIPSIS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 591;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 592;
				dotted_name();
				}
				break;
			case 2:
				{
				State = 594;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 593;
					_la = TokenStream.LA(1);
					if ( !(_la==DOT || _la==ELLIPSIS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 596;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DOT || _la==ELLIPSIS );
				}
				break;
			}
			State = 600;
			Match(IMPORT);
			State = 607;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STAR:
				{
				State = 601;
				Match(STAR);
				}
				break;
			case OPEN_PAREN:
				{
				State = 602;
				Match(OPEN_PAREN);
				State = 603;
				import_as_names();
				State = 604;
				Match(CLOSE_PAREN);
				}
				break;
			case MATCH:
			case UNDERSCORE:
			case NAME:
				{
				State = 606;
				import_as_names();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_as_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(Python3Parser.AS, 0); }
		public Import_as_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_as_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterImport_as_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitImport_as_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImport_as_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Import_as_nameContext import_as_name() {
		Import_as_nameContext _localctx = new Import_as_nameContext(Context, State);
		EnterRule(_localctx, 62, RULE_import_as_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 609;
			name();
			State = 612;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 610;
				Match(AS);
				State = 611;
				name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dotted_as_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Dotted_nameContext dotted_name() {
			return GetRuleContext<Dotted_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(Python3Parser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Dotted_as_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dotted_as_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterDotted_as_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitDotted_as_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotted_as_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dotted_as_nameContext dotted_as_name() {
		Dotted_as_nameContext _localctx = new Dotted_as_nameContext(Context, State);
		EnterRule(_localctx, 64, RULE_dotted_as_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 614;
			dotted_name();
			State = 617;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 615;
				Match(AS);
				State = 616;
				name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_as_namesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Import_as_nameContext[] import_as_name() {
			return GetRuleContexts<Import_as_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_as_nameContext import_as_name(int i) {
			return GetRuleContext<Import_as_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		public Import_as_namesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_as_names; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterImport_as_names(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitImport_as_names(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImport_as_names(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Import_as_namesContext import_as_names() {
		Import_as_namesContext _localctx = new Import_as_namesContext(Context, State);
		EnterRule(_localctx, 66, RULE_import_as_names);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 619;
			import_as_name();
			State = 624;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 620;
					Match(COMMA);
					State = 621;
					import_as_name();
					}
					} 
				}
				State = 626;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			}
			State = 628;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 627;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dotted_as_namesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Dotted_as_nameContext[] dotted_as_name() {
			return GetRuleContexts<Dotted_as_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Dotted_as_nameContext dotted_as_name(int i) {
			return GetRuleContext<Dotted_as_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		public Dotted_as_namesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dotted_as_names; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterDotted_as_names(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitDotted_as_names(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotted_as_names(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dotted_as_namesContext dotted_as_names() {
		Dotted_as_namesContext _localctx = new Dotted_as_namesContext(Context, State);
		EnterRule(_localctx, 68, RULE_dotted_as_names);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 630;
			dotted_as_name();
			State = 635;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 631;
				Match(COMMA);
				State = 632;
				dotted_as_name();
				}
				}
				State = 637;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dotted_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(Python3Parser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(Python3Parser.DOT, i);
		}
		public Dotted_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dotted_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterDotted_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitDotted_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotted_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dotted_nameContext dotted_name() {
		Dotted_nameContext _localctx = new Dotted_nameContext(Context, State);
		EnterRule(_localctx, 70, RULE_dotted_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 638;
			name();
			State = 643;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 639;
				Match(DOT);
				State = 640;
				name();
				}
				}
				State = 645;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(Python3Parser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		public Global_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterGlobal_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitGlobal_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobal_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Global_stmtContext global_stmt() {
		Global_stmtContext _localctx = new Global_stmtContext(Context, State);
		EnterRule(_localctx, 72, RULE_global_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 646;
			Match(GLOBAL);
			State = 647;
			name();
			State = 652;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 648;
				Match(COMMA);
				State = 649;
				name();
				}
				}
				State = 654;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nonlocal_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONLOCAL() { return GetToken(Python3Parser.NONLOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		public Nonlocal_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonlocal_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterNonlocal_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitNonlocal_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonlocal_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Nonlocal_stmtContext nonlocal_stmt() {
		Nonlocal_stmtContext _localctx = new Nonlocal_stmtContext(Context, State);
		EnterRule(_localctx, 74, RULE_nonlocal_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 655;
			Match(NONLOCAL);
			State = 656;
			name();
			State = 661;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 657;
				Match(COMMA);
				State = 658;
				name();
				}
				}
				State = 663;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assert_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERT() { return GetToken(Python3Parser.ASSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TestContext[] test() {
			return GetRuleContexts<TestContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test(int i) {
			return GetRuleContext<TestContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Python3Parser.COMMA, 0); }
		public Assert_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assert_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterAssert_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitAssert_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssert_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assert_stmtContext assert_stmt() {
		Assert_stmtContext _localctx = new Assert_stmtContext(Context, State);
		EnterRule(_localctx, 76, RULE_assert_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 664;
			Match(ASSERT);
			State = 665;
			test();
			State = 668;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 666;
				Match(COMMA);
				State = 667;
				test();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_stmtContext if_stmt() {
			return GetRuleContext<If_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public While_stmtContext while_stmt() {
			return GetRuleContext<While_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_stmtContext for_stmt() {
			return GetRuleContext<For_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Try_stmtContext try_stmt() {
			return GetRuleContext<Try_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_stmtContext with_stmt() {
			return GetRuleContext<With_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncdefContext funcdef() {
			return GetRuleContext<FuncdefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassdefContext classdef() {
			return GetRuleContext<ClassdefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecoratedContext decorated() {
			return GetRuleContext<DecoratedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Async_stmtContext async_stmt() {
			return GetRuleContext<Async_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Match_stmtContext match_stmt() {
			return GetRuleContext<Match_stmtContext>(0);
		}
		public Compound_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterCompound_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitCompound_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_stmtContext compound_stmt() {
		Compound_stmtContext _localctx = new Compound_stmtContext(Context, State);
		EnterRule(_localctx, 78, RULE_compound_stmt);
		try {
			State = 680;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 670;
				if_stmt();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 671;
				while_stmt();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 672;
				for_stmt();
				}
				break;
			case TRY:
				EnterOuterAlt(_localctx, 4);
				{
				State = 673;
				try_stmt();
				}
				break;
			case WITH:
				EnterOuterAlt(_localctx, 5);
				{
				State = 674;
				with_stmt();
				}
				break;
			case DEF:
				EnterOuterAlt(_localctx, 6);
				{
				State = 675;
				funcdef();
				}
				break;
			case CLASS:
				EnterOuterAlt(_localctx, 7);
				{
				State = 676;
				classdef();
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 677;
				decorated();
				}
				break;
			case ASYNC:
				EnterOuterAlt(_localctx, 9);
				{
				State = 678;
				async_stmt();
				}
				break;
			case MATCH:
				EnterOuterAlt(_localctx, 10);
				{
				State = 679;
				match_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Async_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNC() { return GetToken(Python3Parser.ASYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FuncdefContext funcdef() {
			return GetRuleContext<FuncdefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_stmtContext with_stmt() {
			return GetRuleContext<With_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_stmtContext for_stmt() {
			return GetRuleContext<For_stmtContext>(0);
		}
		public Async_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_async_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterAsync_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitAsync_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsync_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Async_stmtContext async_stmt() {
		Async_stmtContext _localctx = new Async_stmtContext(Context, State);
		EnterRule(_localctx, 80, RULE_async_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 682;
			Match(ASYNC);
			State = 686;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEF:
				{
				State = 683;
				funcdef();
				}
				break;
			case WITH:
				{
				State = 684;
				with_stmt();
				}
				break;
			case FOR:
				{
				State = 685;
				for_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(Python3Parser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TestContext[] test() {
			return GetRuleContexts<TestContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test(int i) {
			return GetRuleContext<TestContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(Python3Parser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(Python3Parser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELIF() { return GetTokens(Python3Parser.ELIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELIF(int i) {
			return GetToken(Python3Parser.ELIF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(Python3Parser.ELSE, 0); }
		public If_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterIf_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitIf_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_stmtContext if_stmt() {
		If_stmtContext _localctx = new If_stmtContext(Context, State);
		EnterRule(_localctx, 82, RULE_if_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 688;
			Match(IF);
			State = 689;
			test();
			State = 690;
			Match(COLON);
			State = 691;
			block();
			State = 699;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELIF) {
				{
				{
				State = 692;
				Match(ELIF);
				State = 693;
				test();
				State = 694;
				Match(COLON);
				State = 695;
				block();
				}
				}
				State = 701;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 705;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 702;
				Match(ELSE);
				State = 703;
				Match(COLON);
				State = 704;
				block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(Python3Parser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test() {
			return GetRuleContext<TestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(Python3Parser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(Python3Parser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(Python3Parser.ELSE, 0); }
		public While_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterWhile_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitWhile_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_stmtContext while_stmt() {
		While_stmtContext _localctx = new While_stmtContext(Context, State);
		EnterRule(_localctx, 84, RULE_while_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 707;
			Match(WHILE);
			State = 708;
			test();
			State = 709;
			Match(COLON);
			State = 710;
			block();
			State = 714;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 711;
				Match(ELSE);
				State = 712;
				Match(COLON);
				State = 713;
				block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(Python3Parser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprlistContext exprlist() {
			return GetRuleContext<ExprlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(Python3Parser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TestlistContext testlist() {
			return GetRuleContext<TestlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(Python3Parser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(Python3Parser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(Python3Parser.ELSE, 0); }
		public For_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterFor_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitFor_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_stmtContext for_stmt() {
		For_stmtContext _localctx = new For_stmtContext(Context, State);
		EnterRule(_localctx, 86, RULE_for_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 716;
			Match(FOR);
			State = 717;
			exprlist();
			State = 718;
			Match(IN);
			State = 719;
			testlist();
			State = 720;
			Match(COLON);
			State = 721;
			block();
			State = 725;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 722;
				Match(ELSE);
				State = 723;
				Match(COLON);
				State = 724;
				block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Try_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRY() { return GetToken(Python3Parser.TRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(Python3Parser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(Python3Parser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINALLY() { return GetToken(Python3Parser.FINALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Except_clauseContext[] except_clause() {
			return GetRuleContexts<Except_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Except_clauseContext except_clause(int i) {
			return GetRuleContext<Except_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(Python3Parser.ELSE, 0); }
		public Try_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterTry_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitTry_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTry_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Try_stmtContext try_stmt() {
		Try_stmtContext _localctx = new Try_stmtContext(Context, State);
		EnterRule(_localctx, 88, RULE_try_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 727;
			Match(TRY);
			State = 728;
			Match(COLON);
			State = 729;
			block();
			State = 751;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXCEPT:
				{
				State = 734;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 730;
					except_clause();
					State = 731;
					Match(COLON);
					State = 732;
					block();
					}
					}
					State = 736;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==EXCEPT );
				State = 741;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 738;
					Match(ELSE);
					State = 739;
					Match(COLON);
					State = 740;
					block();
					}
				}

				State = 746;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FINALLY) {
					{
					State = 743;
					Match(FINALLY);
					State = 744;
					Match(COLON);
					State = 745;
					block();
					}
				}

				}
				break;
			case FINALLY:
				{
				State = 748;
				Match(FINALLY);
				State = 749;
				Match(COLON);
				State = 750;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(Python3Parser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public With_itemContext[] with_item() {
			return GetRuleContexts<With_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public With_itemContext with_item(int i) {
			return GetRuleContext<With_itemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Python3Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		public With_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterWith_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitWith_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWith_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public With_stmtContext with_stmt() {
		With_stmtContext _localctx = new With_stmtContext(Context, State);
		EnterRule(_localctx, 90, RULE_with_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 753;
			Match(WITH);
			State = 754;
			with_item();
			State = 759;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 755;
				Match(COMMA);
				State = 756;
				with_item();
				}
				}
				State = 761;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 762;
			Match(COLON);
			State = 763;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class With_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test() {
			return GetRuleContext<TestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(Python3Parser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public With_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_with_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterWith_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitWith_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWith_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public With_itemContext with_item() {
		With_itemContext _localctx = new With_itemContext(Context, State);
		EnterRule(_localctx, 92, RULE_with_item);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 765;
			test();
			State = 768;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 766;
				Match(AS);
				State = 767;
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Except_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(Python3Parser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test() {
			return GetRuleContext<TestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(Python3Parser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Except_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_except_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterExcept_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitExcept_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExcept_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Except_clauseContext except_clause() {
		Except_clauseContext _localctx = new Except_clauseContext(Context, State);
		EnterRule(_localctx, 94, RULE_except_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 770;
			Match(EXCEPT);
			State = 776;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 180180556205523992L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 12673L) != 0)) {
				{
				State = 771;
				test();
				State = 774;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 772;
					Match(AS);
					State = 773;
					name();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_stmtsContext simple_stmts() {
			return GetRuleContext<Simple_stmtsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(Python3Parser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(Python3Parser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(Python3Parser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 96, RULE_block);
		int _la;
		try {
			State = 788;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case NUMBER:
			case ASSERT:
			case AWAIT:
			case BREAK:
			case CONTINUE:
			case DEL:
			case FALSE:
			case FROM:
			case GLOBAL:
			case IMPORT:
			case LAMBDA:
			case MATCH:
			case NONE:
			case NONLOCAL:
			case NOT:
			case PASS:
			case RAISE:
			case RETURN:
			case TRUE:
			case UNDERSCORE:
			case YIELD:
			case NAME:
			case ELLIPSIS:
			case STAR:
			case OPEN_PAREN:
			case OPEN_BRACK:
			case ADD:
			case MINUS:
			case NOT_OP:
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 778;
				simple_stmts();
				}
				break;
			case NEWLINE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 779;
				Match(NEWLINE);
				State = 780;
				Match(INDENT);
				State = 782;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 781;
					stmt();
					}
					}
					State = 784;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 252254338105339672L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4206977L) != 0) );
				State = 786;
				Match(DEDENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Match_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(Python3Parser.MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subject_exprContext subject_expr() {
			return GetRuleContext<Subject_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Python3Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(Python3Parser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDENT() { return GetToken(Python3Parser.INDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEDENT() { return GetToken(Python3Parser.DEDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Case_blockContext[] case_block() {
			return GetRuleContexts<Case_blockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_blockContext case_block(int i) {
			return GetRuleContext<Case_blockContext>(i);
		}
		public Match_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_match_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterMatch_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitMatch_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatch_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Match_stmtContext match_stmt() {
		Match_stmtContext _localctx = new Match_stmtContext(Context, State);
		EnterRule(_localctx, 98, RULE_match_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 790;
			Match(MATCH);
			State = 791;
			subject_expr();
			State = 792;
			Match(COLON);
			State = 793;
			Match(NEWLINE);
			State = 794;
			Match(INDENT);
			State = 796;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 795;
				case_block();
				}
				}
				State = 798;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CASE );
			State = 800;
			Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subject_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionContext star_named_expression() {
			return GetRuleContext<Star_named_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Python3Parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionsContext star_named_expressions() {
			return GetRuleContext<Star_named_expressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test() {
			return GetRuleContext<TestContext>(0);
		}
		public Subject_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subject_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterSubject_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitSubject_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubject_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subject_exprContext subject_expr() {
		Subject_exprContext _localctx = new Subject_exprContext(Context, State);
		EnterRule(_localctx, 100, RULE_subject_expr);
		int _la;
		try {
			State = 808;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 802;
				star_named_expression();
				State = 803;
				Match(COMMA);
				State = 805;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 804;
					star_named_expressions();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 807;
				test();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Star_named_expressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionContext[] star_named_expression() {
			return GetRuleContexts<Star_named_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Star_named_expressionContext star_named_expression(int i) {
			return GetRuleContext<Star_named_expressionContext>(i);
		}
		public Star_named_expressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_star_named_expressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterStar_named_expressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitStar_named_expressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStar_named_expressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Star_named_expressionsContext star_named_expressions() {
		Star_named_expressionsContext _localctx = new Star_named_expressionsContext(Context, State);
		EnterRule(_localctx, 102, RULE_star_named_expressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 810;
			Match(COMMA);
			State = 812;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 811;
				star_named_expression();
				}
				}
				State = 814;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 252238150243451928L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 12673L) != 0) );
			State = 817;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 816;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Star_named_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(Python3Parser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test() {
			return GetRuleContext<TestContext>(0);
		}
		public Star_named_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_star_named_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterStar_named_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitStar_named_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStar_named_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Star_named_expressionContext star_named_expression() {
		Star_named_expressionContext _localctx = new Star_named_expressionContext(Context, State);
		EnterRule(_localctx, 104, RULE_star_named_expression);
		try {
			State = 822;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 819;
				Match(STAR);
				State = 820;
				expr(0);
				}
				break;
			case STRING:
			case NUMBER:
			case AWAIT:
			case FALSE:
			case LAMBDA:
			case MATCH:
			case NONE:
			case NOT:
			case TRUE:
			case UNDERSCORE:
			case NAME:
			case ELLIPSIS:
			case OPEN_PAREN:
			case OPEN_BRACK:
			case ADD:
			case MINUS:
			case NOT_OP:
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 821;
				test();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(Python3Parser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PatternsContext patterns() {
			return GetRuleContext<PatternsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Python3Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GuardContext guard() {
			return GetRuleContext<GuardContext>(0);
		}
		public Case_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterCase_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitCase_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_blockContext case_block() {
		Case_blockContext _localctx = new Case_blockContext(Context, State);
		EnterRule(_localctx, 106, RULE_case_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 824;
			Match(CASE);
			State = 825;
			patterns();
			State = 827;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 826;
				guard();
				}
			}

			State = 829;
			Match(COLON);
			State = 830;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GuardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(Python3Parser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test() {
			return GetRuleContext<TestContext>(0);
		}
		public GuardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_guard; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterGuard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitGuard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGuard(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GuardContext guard() {
		GuardContext _localctx = new GuardContext(Context, State);
		EnterRule(_localctx, 108, RULE_guard);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 832;
			Match(IF);
			State = 833;
			test();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatternsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Open_sequence_patternContext open_sequence_pattern() {
			return GetRuleContext<Open_sequence_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		public PatternsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patterns; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterPatterns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitPatterns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatterns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatternsContext patterns() {
		PatternsContext _localctx = new PatternsContext(Context, State);
		EnterRule(_localctx, 110, RULE_patterns);
		try {
			State = 837;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 835;
				open_sequence_pattern();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 836;
				pattern();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public As_patternContext as_pattern() {
			return GetRuleContext<As_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Or_patternContext or_pattern() {
			return GetRuleContext<Or_patternContext>(0);
		}
		public PatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatternContext pattern() {
		PatternContext _localctx = new PatternContext(Context, State);
		EnterRule(_localctx, 112, RULE_pattern);
		try {
			State = 841;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 839;
				as_pattern();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 840;
				or_pattern();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class As_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Or_patternContext or_pattern() {
			return GetRuleContext<Or_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(Python3Parser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pattern_capture_targetContext pattern_capture_target() {
			return GetRuleContext<Pattern_capture_targetContext>(0);
		}
		public As_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_as_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterAs_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitAs_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAs_pattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public As_patternContext as_pattern() {
		As_patternContext _localctx = new As_patternContext(Context, State);
		EnterRule(_localctx, 114, RULE_as_pattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 843;
			or_pattern();
			State = 844;
			Match(AS);
			State = 845;
			pattern_capture_target();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Or_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Closed_patternContext[] closed_pattern() {
			return GetRuleContexts<Closed_patternContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Closed_patternContext closed_pattern(int i) {
			return GetRuleContext<Closed_patternContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR_OP() { return GetTokens(Python3Parser.OR_OP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_OP(int i) {
			return GetToken(Python3Parser.OR_OP, i);
		}
		public Or_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_or_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterOr_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitOr_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr_pattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Or_patternContext or_pattern() {
		Or_patternContext _localctx = new Or_patternContext(Context, State);
		EnterRule(_localctx, 116, RULE_or_pattern);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 847;
			closed_pattern();
			State = 852;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR_OP) {
				{
				{
				State = 848;
				Match(OR_OP);
				State = 849;
				closed_pattern();
				}
				}
				State = 854;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Closed_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Literal_patternContext literal_pattern() {
			return GetRuleContext<Literal_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Capture_patternContext capture_pattern() {
			return GetRuleContext<Capture_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wildcard_patternContext wildcard_pattern() {
			return GetRuleContext<Wildcard_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Value_patternContext value_pattern() {
			return GetRuleContext<Value_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_patternContext group_pattern() {
			return GetRuleContext<Group_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sequence_patternContext sequence_pattern() {
			return GetRuleContext<Sequence_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Mapping_patternContext mapping_pattern() {
			return GetRuleContext<Mapping_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_patternContext class_pattern() {
			return GetRuleContext<Class_patternContext>(0);
		}
		public Closed_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closed_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterClosed_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitClosed_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClosed_pattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Closed_patternContext closed_pattern() {
		Closed_patternContext _localctx = new Closed_patternContext(Context, State);
		EnterRule(_localctx, 118, RULE_closed_pattern);
		try {
			State = 863;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 855;
				literal_pattern();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 856;
				capture_pattern();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 857;
				wildcard_pattern();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 858;
				value_pattern();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 859;
				group_pattern();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 860;
				sequence_pattern();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 861;
				mapping_pattern();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 862;
				class_pattern();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Complex_numberContext complex_number() {
			return GetRuleContext<Complex_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringsContext strings() {
			return GetRuleContext<StringsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(Python3Parser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(Python3Parser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(Python3Parser.FALSE, 0); }
		public Literal_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterLiteral_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitLiteral_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral_pattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Literal_patternContext literal_pattern() {
		Literal_patternContext _localctx = new Literal_patternContext(Context, State);
		EnterRule(_localctx, 120, RULE_literal_pattern);
		try {
			State = 873;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 865;
				signed_number();
				State = 866;
				if (!( this.CannotBePlusMinus() )) throw new FailedPredicateException(this, " this.CannotBePlusMinus() ");
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 868;
				complex_number();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 869;
				strings();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 870;
				Match(NONE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 871;
				Match(TRUE);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 872;
				Match(FALSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Complex_numberContext complex_number() {
			return GetRuleContext<Complex_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringsContext strings() {
			return GetRuleContext<StringsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(Python3Parser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(Python3Parser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(Python3Parser.FALSE, 0); }
		public Literal_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterLiteral_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitLiteral_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Literal_exprContext literal_expr() {
		Literal_exprContext _localctx = new Literal_exprContext(Context, State);
		EnterRule(_localctx, 122, RULE_literal_expr);
		try {
			State = 883;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 875;
				signed_number();
				State = 876;
				if (!( this.CannotBePlusMinus() )) throw new FailedPredicateException(this, " this.CannotBePlusMinus() ");
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 878;
				complex_number();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 879;
				strings();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 880;
				Match(NONE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 881;
				Match(TRUE);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 882;
				Match(FALSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Complex_numberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Signed_real_numberContext signed_real_number() {
			return GetRuleContext<Signed_real_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(Python3Parser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Imaginary_numberContext imaginary_number() {
			return GetRuleContext<Imaginary_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(Python3Parser.MINUS, 0); }
		public Complex_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complex_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterComplex_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitComplex_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplex_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Complex_numberContext complex_number() {
		Complex_numberContext _localctx = new Complex_numberContext(Context, State);
		EnterRule(_localctx, 124, RULE_complex_number);
		try {
			State = 893;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 885;
				signed_real_number();
				State = 886;
				Match(ADD);
				State = 887;
				imaginary_number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 889;
				signed_real_number();
				State = 890;
				Match(MINUS);
				State = 891;
				imaginary_number();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signed_numberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(Python3Parser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(Python3Parser.MINUS, 0); }
		public Signed_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signed_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterSigned_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitSigned_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSigned_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Signed_numberContext signed_number() {
		Signed_numberContext _localctx = new Signed_numberContext(Context, State);
		EnterRule(_localctx, 126, RULE_signed_number);
		try {
			State = 898;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 895;
				Match(NUMBER);
				}
				break;
			case MINUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 896;
				Match(MINUS);
				State = 897;
				Match(NUMBER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signed_real_numberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Real_numberContext real_number() {
			return GetRuleContext<Real_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(Python3Parser.MINUS, 0); }
		public Signed_real_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signed_real_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterSigned_real_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitSigned_real_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSigned_real_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Signed_real_numberContext signed_real_number() {
		Signed_real_numberContext _localctx = new Signed_real_numberContext(Context, State);
		EnterRule(_localctx, 128, RULE_signed_real_number);
		try {
			State = 903;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 900;
				real_number();
				}
				break;
			case MINUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 901;
				Match(MINUS);
				State = 902;
				real_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Real_numberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(Python3Parser.NUMBER, 0); }
		public Real_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_real_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterReal_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitReal_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReal_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Real_numberContext real_number() {
		Real_numberContext _localctx = new Real_numberContext(Context, State);
		EnterRule(_localctx, 130, RULE_real_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 905;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Imaginary_numberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(Python3Parser.NUMBER, 0); }
		public Imaginary_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imaginary_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterImaginary_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitImaginary_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImaginary_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Imaginary_numberContext imaginary_number() {
		Imaginary_numberContext _localctx = new Imaginary_numberContext(Context, State);
		EnterRule(_localctx, 132, RULE_imaginary_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 907;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Capture_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Pattern_capture_targetContext pattern_capture_target() {
			return GetRuleContext<Pattern_capture_targetContext>(0);
		}
		public Capture_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_capture_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterCapture_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitCapture_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCapture_pattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Capture_patternContext capture_pattern() {
		Capture_patternContext _localctx = new Capture_patternContext(Context, State);
		EnterRule(_localctx, 134, RULE_capture_pattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 909;
			pattern_capture_target();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pattern_capture_targetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Pattern_capture_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pattern_capture_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterPattern_capture_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitPattern_capture_target(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPattern_capture_target(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pattern_capture_targetContext pattern_capture_target() {
		Pattern_capture_targetContext _localctx = new Pattern_capture_targetContext(Context, State);
		EnterRule(_localctx, 136, RULE_pattern_capture_target);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 911;
			name();
			State = 912;
			if (!( this.CannotBeDotLpEq() )) throw new FailedPredicateException(this, " this.CannotBeDotLpEq() ");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Wildcard_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDERSCORE() { return GetToken(Python3Parser.UNDERSCORE, 0); }
		public Wildcard_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wildcard_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterWildcard_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitWildcard_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildcard_pattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Wildcard_patternContext wildcard_pattern() {
		Wildcard_patternContext _localctx = new Wildcard_patternContext(Context, State);
		EnterRule(_localctx, 138, RULE_wildcard_pattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 914;
			Match(UNDERSCORE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttrContext attr() {
			return GetRuleContext<AttrContext>(0);
		}
		public Value_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterValue_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitValue_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_pattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Value_patternContext value_pattern() {
		Value_patternContext _localctx = new Value_patternContext(Context, State);
		EnterRule(_localctx, 140, RULE_value_pattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 916;
			attr();
			State = 917;
			if (!( this.CannotBeDotLpEq() )) throw new FailedPredicateException(this, " this.CannotBeDotLpEq() ");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(Python3Parser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(Python3Parser.DOT, i);
		}
		public AttrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterAttr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitAttr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttrContext attr() {
		AttrContext _localctx = new AttrContext(Context, State);
		EnterRule(_localctx, 142, RULE_attr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 919;
			name();
			State = 922;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 920;
					Match(DOT);
					State = 921;
					name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 924;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,114,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Name_or_attrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttrContext attr() {
			return GetRuleContext<AttrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Name_or_attrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name_or_attr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterName_or_attr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitName_or_attr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName_or_attr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Name_or_attrContext name_or_attr() {
		Name_or_attrContext _localctx = new Name_or_attrContext(Context, State);
		EnterRule(_localctx, 144, RULE_name_or_attr);
		try {
			State = 928;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 926;
				attr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 927;
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(Python3Parser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(Python3Parser.CLOSE_PAREN, 0); }
		public Group_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterGroup_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitGroup_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup_pattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Group_patternContext group_pattern() {
		Group_patternContext _localctx = new Group_patternContext(Context, State);
		EnterRule(_localctx, 146, RULE_group_pattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 930;
			Match(OPEN_PAREN);
			State = 931;
			pattern();
			State = 932;
			Match(CLOSE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sequence_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACK() { return GetToken(Python3Parser.OPEN_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACK() { return GetToken(Python3Parser.CLOSE_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Maybe_sequence_patternContext maybe_sequence_pattern() {
			return GetRuleContext<Maybe_sequence_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(Python3Parser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(Python3Parser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Open_sequence_patternContext open_sequence_pattern() {
			return GetRuleContext<Open_sequence_patternContext>(0);
		}
		public Sequence_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequence_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterSequence_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitSequence_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSequence_pattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sequence_patternContext sequence_pattern() {
		Sequence_patternContext _localctx = new Sequence_patternContext(Context, State);
		EnterRule(_localctx, 148, RULE_sequence_pattern);
		int _la;
		try {
			State = 944;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 934;
				Match(OPEN_BRACK);
				State = 936;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 216209344097681432L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8449L) != 0)) {
					{
					State = 935;
					maybe_sequence_pattern();
					}
				}

				State = 938;
				Match(CLOSE_BRACK);
				}
				break;
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 939;
				Match(OPEN_PAREN);
				State = 941;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 216209344097681432L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8449L) != 0)) {
					{
					State = 940;
					open_sequence_pattern();
					}
				}

				State = 943;
				Match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Open_sequence_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Maybe_star_patternContext maybe_star_pattern() {
			return GetRuleContext<Maybe_star_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(Python3Parser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Maybe_sequence_patternContext maybe_sequence_pattern() {
			return GetRuleContext<Maybe_sequence_patternContext>(0);
		}
		public Open_sequence_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_open_sequence_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterOpen_sequence_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitOpen_sequence_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpen_sequence_pattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Open_sequence_patternContext open_sequence_pattern() {
		Open_sequence_patternContext _localctx = new Open_sequence_patternContext(Context, State);
		EnterRule(_localctx, 150, RULE_open_sequence_pattern);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 946;
			maybe_star_pattern();
			State = 947;
			Match(COMMA);
			State = 949;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 216209344097681432L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 8449L) != 0)) {
				{
				State = 948;
				maybe_sequence_pattern();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Maybe_sequence_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Maybe_star_patternContext[] maybe_star_pattern() {
			return GetRuleContexts<Maybe_star_patternContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Maybe_star_patternContext maybe_star_pattern(int i) {
			return GetRuleContext<Maybe_star_patternContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		public Maybe_sequence_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maybe_sequence_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterMaybe_sequence_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitMaybe_sequence_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaybe_sequence_pattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Maybe_sequence_patternContext maybe_sequence_pattern() {
		Maybe_sequence_patternContext _localctx = new Maybe_sequence_patternContext(Context, State);
		EnterRule(_localctx, 152, RULE_maybe_sequence_pattern);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 951;
			maybe_star_pattern();
			State = 956;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,120,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 952;
					Match(COMMA);
					State = 953;
					maybe_star_pattern();
					}
					} 
				}
				State = 958;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,120,Context);
			}
			State = 960;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 959;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Maybe_star_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Star_patternContext star_pattern() {
			return GetRuleContext<Star_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		public Maybe_star_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maybe_star_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterMaybe_star_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitMaybe_star_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaybe_star_pattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Maybe_star_patternContext maybe_star_pattern() {
		Maybe_star_patternContext _localctx = new Maybe_star_patternContext(Context, State);
		EnterRule(_localctx, 154, RULE_maybe_star_pattern);
		try {
			State = 964;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 962;
				star_pattern();
				}
				break;
			case STRING:
			case NUMBER:
			case FALSE:
			case MATCH:
			case NONE:
			case TRUE:
			case UNDERSCORE:
			case NAME:
			case OPEN_PAREN:
			case OPEN_BRACK:
			case MINUS:
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 963;
				pattern();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Star_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(Python3Parser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pattern_capture_targetContext pattern_capture_target() {
			return GetRuleContext<Pattern_capture_targetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Wildcard_patternContext wildcard_pattern() {
			return GetRuleContext<Wildcard_patternContext>(0);
		}
		public Star_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_star_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterStar_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitStar_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStar_pattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Star_patternContext star_pattern() {
		Star_patternContext _localctx = new Star_patternContext(Context, State);
		EnterRule(_localctx, 156, RULE_star_pattern);
		try {
			State = 970;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 966;
				Match(STAR);
				State = 967;
				pattern_capture_target();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 968;
				Match(STAR);
				State = 969;
				wildcard_pattern();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mapping_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(Python3Parser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(Python3Parser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Double_star_patternContext double_star_pattern() {
			return GetRuleContext<Double_star_patternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Items_patternContext items_pattern() {
			return GetRuleContext<Items_patternContext>(0);
		}
		public Mapping_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapping_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterMapping_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitMapping_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapping_pattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mapping_patternContext mapping_pattern() {
		Mapping_patternContext _localctx = new Mapping_patternContext(Context, State);
		EnterRule(_localctx, 158, RULE_mapping_pattern);
		int _la;
		try {
			State = 997;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 972;
				Match(OPEN_BRACE);
				State = 973;
				Match(CLOSE_BRACE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 974;
				Match(OPEN_BRACE);
				State = 975;
				double_star_pattern();
				State = 977;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 976;
					Match(COMMA);
					}
				}

				State = 979;
				Match(CLOSE_BRACE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 981;
				Match(OPEN_BRACE);
				State = 982;
				items_pattern();
				State = 983;
				Match(COMMA);
				State = 984;
				double_star_pattern();
				State = 986;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 985;
					Match(COMMA);
					}
				}

				State = 988;
				Match(CLOSE_BRACE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 990;
				Match(OPEN_BRACE);
				State = 991;
				items_pattern();
				State = 993;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 992;
					Match(COMMA);
					}
				}

				State = 995;
				Match(CLOSE_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Items_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Key_value_patternContext[] key_value_pattern() {
			return GetRuleContexts<Key_value_patternContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Key_value_patternContext key_value_pattern(int i) {
			return GetRuleContext<Key_value_patternContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		public Items_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_items_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterItems_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitItems_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItems_pattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Items_patternContext items_pattern() {
		Items_patternContext _localctx = new Items_patternContext(Context, State);
		EnterRule(_localctx, 160, RULE_items_pattern);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 999;
			key_value_pattern();
			State = 1004;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,128,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1000;
					Match(COMMA);
					State = 1001;
					key_value_pattern();
					}
					} 
				}
				State = 1006;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,128,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Key_value_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Python3Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Literal_exprContext literal_expr() {
			return GetRuleContext<Literal_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrContext attr() {
			return GetRuleContext<AttrContext>(0);
		}
		public Key_value_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key_value_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterKey_value_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitKey_value_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKey_value_pattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Key_value_patternContext key_value_pattern() {
		Key_value_patternContext _localctx = new Key_value_patternContext(Context, State);
		EnterRule(_localctx, 162, RULE_key_value_pattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1009;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case NUMBER:
			case FALSE:
			case NONE:
			case TRUE:
			case MINUS:
				{
				State = 1007;
				literal_expr();
				}
				break;
			case MATCH:
			case UNDERSCORE:
			case NAME:
				{
				State = 1008;
				attr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1011;
			Match(COLON);
			State = 1012;
			pattern();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Double_star_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(Python3Parser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pattern_capture_targetContext pattern_capture_target() {
			return GetRuleContext<Pattern_capture_targetContext>(0);
		}
		public Double_star_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_double_star_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterDouble_star_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitDouble_star_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDouble_star_pattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Double_star_patternContext double_star_pattern() {
		Double_star_patternContext _localctx = new Double_star_patternContext(Context, State);
		EnterRule(_localctx, 164, RULE_double_star_pattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1014;
			Match(POWER);
			State = 1015;
			pattern_capture_target();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Name_or_attrContext name_or_attr() {
			return GetRuleContext<Name_or_attrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(Python3Parser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(Python3Parser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Positional_patternsContext positional_patterns() {
			return GetRuleContext<Positional_patternsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_patternsContext keyword_patterns() {
			return GetRuleContext<Keyword_patternsContext>(0);
		}
		public Class_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterClass_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitClass_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_pattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_patternContext class_pattern() {
		Class_patternContext _localctx = new Class_patternContext(Context, State);
		EnterRule(_localctx, 166, RULE_class_pattern);
		int _la;
		try {
			State = 1047;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,133,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1017;
				name_or_attr();
				State = 1018;
				Match(OPEN_PAREN);
				State = 1019;
				Match(CLOSE_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1021;
				name_or_attr();
				State = 1022;
				Match(OPEN_PAREN);
				State = 1023;
				positional_patterns();
				State = 1025;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1024;
					Match(COMMA);
					}
				}

				State = 1027;
				Match(CLOSE_PAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1029;
				name_or_attr();
				State = 1030;
				Match(OPEN_PAREN);
				State = 1031;
				keyword_patterns();
				State = 1033;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1032;
					Match(COMMA);
					}
				}

				State = 1035;
				Match(CLOSE_PAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1037;
				name_or_attr();
				State = 1038;
				Match(OPEN_PAREN);
				State = 1039;
				positional_patterns();
				State = 1040;
				Match(COMMA);
				State = 1041;
				keyword_patterns();
				State = 1043;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1042;
					Match(COMMA);
					}
				}

				State = 1045;
				Match(CLOSE_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Positional_patternsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext[] pattern() {
			return GetRuleContexts<PatternContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern(int i) {
			return GetRuleContext<PatternContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		public Positional_patternsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positional_patterns; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterPositional_patterns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitPositional_patterns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositional_patterns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Positional_patternsContext positional_patterns() {
		Positional_patternsContext _localctx = new Positional_patternsContext(Context, State);
		EnterRule(_localctx, 168, RULE_positional_patterns);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1049;
			pattern();
			State = 1054;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,134,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1050;
					Match(COMMA);
					State = 1051;
					pattern();
					}
					} 
				}
				State = 1056;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,134,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Keyword_patternsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_patternContext[] keyword_pattern() {
			return GetRuleContexts<Keyword_patternContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Keyword_patternContext keyword_pattern(int i) {
			return GetRuleContext<Keyword_patternContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		public Keyword_patternsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword_patterns; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterKeyword_patterns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitKeyword_patterns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword_patterns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Keyword_patternsContext keyword_patterns() {
		Keyword_patternsContext _localctx = new Keyword_patternsContext(Context, State);
		EnterRule(_localctx, 170, RULE_keyword_patterns);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1057;
			keyword_pattern();
			State = 1062;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,135,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1058;
					Match(COMMA);
					State = 1059;
					keyword_pattern();
					}
					} 
				}
				State = 1064;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,135,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Keyword_patternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(Python3Parser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		public Keyword_patternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterKeyword_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitKeyword_pattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword_pattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Keyword_patternContext keyword_pattern() {
		Keyword_patternContext _localctx = new Keyword_patternContext(Context, State);
		EnterRule(_localctx, 172, RULE_keyword_pattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1065;
			name();
			State = 1066;
			Match(ASSIGN);
			State = 1067;
			pattern();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Or_testContext[] or_test() {
			return GetRuleContexts<Or_testContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Or_testContext or_test(int i) {
			return GetRuleContext<Or_testContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(Python3Parser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(Python3Parser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test() {
			return GetRuleContext<TestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdefContext lambdef() {
			return GetRuleContext<LambdefContext>(0);
		}
		public TestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_test; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterTest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitTest(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestContext test() {
		TestContext _localctx = new TestContext(Context, State);
		EnterRule(_localctx, 174, RULE_test);
		int _la;
		try {
			State = 1078;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case NUMBER:
			case AWAIT:
			case FALSE:
			case MATCH:
			case NONE:
			case NOT:
			case TRUE:
			case UNDERSCORE:
			case NAME:
			case ELLIPSIS:
			case OPEN_PAREN:
			case OPEN_BRACK:
			case ADD:
			case MINUS:
			case NOT_OP:
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1069;
				or_test();
				State = 1075;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 1070;
					Match(IF);
					State = 1071;
					or_test();
					State = 1072;
					Match(ELSE);
					State = 1073;
					test();
					}
				}

				}
				break;
			case LAMBDA:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1077;
				lambdef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Test_nocondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Or_testContext or_test() {
			return GetRuleContext<Or_testContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lambdef_nocondContext lambdef_nocond() {
			return GetRuleContext<Lambdef_nocondContext>(0);
		}
		public Test_nocondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_test_nocond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterTest_nocond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitTest_nocond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTest_nocond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Test_nocondContext test_nocond() {
		Test_nocondContext _localctx = new Test_nocondContext(Context, State);
		EnterRule(_localctx, 176, RULE_test_nocond);
		try {
			State = 1082;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case NUMBER:
			case AWAIT:
			case FALSE:
			case MATCH:
			case NONE:
			case NOT:
			case TRUE:
			case UNDERSCORE:
			case NAME:
			case ELLIPSIS:
			case OPEN_PAREN:
			case OPEN_BRACK:
			case ADD:
			case MINUS:
			case NOT_OP:
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1080;
				or_test();
				}
				break;
			case LAMBDA:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1081;
				lambdef_nocond();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAMBDA() { return GetToken(Python3Parser.LAMBDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Python3Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test() {
			return GetRuleContext<TestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarargslistContext varargslist() {
			return GetRuleContext<VarargslistContext>(0);
		}
		public LambdefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterLambdef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitLambdef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdefContext lambdef() {
		LambdefContext _localctx = new LambdefContext(Context, State);
		EnterRule(_localctx, 178, RULE_lambdef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1084;
			Match(LAMBDA);
			State = 1086;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4683779897422774272L) != 0)) {
				{
				State = 1085;
				varargslist();
				}
			}

			State = 1088;
			Match(COLON);
			State = 1089;
			test();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lambdef_nocondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAMBDA() { return GetToken(Python3Parser.LAMBDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Python3Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Test_nocondContext test_nocond() {
			return GetRuleContext<Test_nocondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarargslistContext varargslist() {
			return GetRuleContext<VarargslistContext>(0);
		}
		public Lambdef_nocondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdef_nocond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterLambdef_nocond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitLambdef_nocond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdef_nocond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lambdef_nocondContext lambdef_nocond() {
		Lambdef_nocondContext _localctx = new Lambdef_nocondContext(Context, State);
		EnterRule(_localctx, 180, RULE_lambdef_nocond);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1091;
			Match(LAMBDA);
			State = 1093;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4683779897422774272L) != 0)) {
				{
				State = 1092;
				varargslist();
				}
			}

			State = 1095;
			Match(COLON);
			State = 1096;
			test_nocond();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Or_testContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public And_testContext[] and_test() {
			return GetRuleContexts<And_testContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public And_testContext and_test(int i) {
			return GetRuleContext<And_testContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(Python3Parser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(Python3Parser.OR, i);
		}
		public Or_testContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_or_test; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterOr_test(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitOr_test(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr_test(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Or_testContext or_test() {
		Or_testContext _localctx = new Or_testContext(Context, State);
		EnterRule(_localctx, 182, RULE_or_test);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1098;
			and_test();
			State = 1103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 1099;
				Match(OR);
				State = 1100;
				and_test();
				}
				}
				State = 1105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class And_testContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Not_testContext[] not_test() {
			return GetRuleContexts<Not_testContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Not_testContext not_test(int i) {
			return GetRuleContext<Not_testContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(Python3Parser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(Python3Parser.AND, i);
		}
		public And_testContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_test; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterAnd_test(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitAnd_test(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd_test(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public And_testContext and_test() {
		And_testContext _localctx = new And_testContext(Context, State);
		EnterRule(_localctx, 184, RULE_and_test);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1106;
			not_test();
			State = 1111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 1107;
				Match(AND);
				State = 1108;
				not_test();
				}
				}
				State = 1113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Not_testContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(Python3Parser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Not_testContext not_test() {
			return GetRuleContext<Not_testContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public Not_testContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_not_test; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterNot_test(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitNot_test(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot_test(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Not_testContext not_test() {
		Not_testContext _localctx = new Not_testContext(Context, State);
		EnterRule(_localctx, 186, RULE_not_test);
		try {
			State = 1117;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1114;
				Match(NOT);
				State = 1115;
				not_test();
				}
				break;
			case STRING:
			case NUMBER:
			case AWAIT:
			case FALSE:
			case MATCH:
			case NONE:
			case TRUE:
			case UNDERSCORE:
			case NAME:
			case ELLIPSIS:
			case OPEN_PAREN:
			case OPEN_BRACK:
			case ADD:
			case MINUS:
			case NOT_OP:
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1116;
				comparison();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comp_opContext[] comp_op() {
			return GetRuleContexts<Comp_opContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comp_opContext comp_op(int i) {
			return GetRuleContext<Comp_opContext>(i);
		}
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 188, RULE_comparison);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1119;
			expr(0);
			State = 1125;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,144,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1120;
					comp_op();
					State = 1121;
					expr(0);
					}
					} 
				}
				State = 1127;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,144,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comp_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_THAN() { return GetToken(Python3Parser.LESS_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN() { return GetToken(Python3Parser.GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(Python3Parser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT_EQ() { return GetToken(Python3Parser.GT_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT_EQ() { return GetToken(Python3Parser.LT_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQ_1() { return GetToken(Python3Parser.NOT_EQ_1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQ_2() { return GetToken(Python3Parser.NOT_EQ_2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(Python3Parser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(Python3Parser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(Python3Parser.IS, 0); }
		public Comp_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comp_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterComp_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitComp_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComp_op(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comp_opContext comp_op() {
		Comp_opContext _localctx = new Comp_opContext(Context, State);
		EnterRule(_localctx, 190, RULE_comp_op);
		try {
			State = 1141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,145,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1128;
				Match(LESS_THAN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1129;
				Match(GREATER_THAN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1130;
				Match(EQUALS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1131;
				Match(GT_EQ);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1132;
				Match(LT_EQ);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1133;
				Match(NOT_EQ_1);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1134;
				Match(NOT_EQ_2);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1135;
				Match(IN);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1136;
				Match(NOT);
				State = 1137;
				Match(IN);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1138;
				Match(IS);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1139;
				Match(IS);
				State = 1140;
				Match(NOT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Star_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(Python3Parser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Star_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_star_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterStar_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitStar_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStar_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Star_exprContext star_expr() {
		Star_exprContext _localctx = new Star_exprContext(Context, State);
		EnterRule(_localctx, 192, RULE_star_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1143;
			Match(STAR);
			State = 1144;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Atom_exprContext atom_expr() {
			return GetRuleContext<Atom_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ADD() { return GetTokens(Python3Parser.ADD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD(int i) {
			return GetToken(Python3Parser.ADD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(Python3Parser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(Python3Parser.MINUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOT_OP() { return GetTokens(Python3Parser.NOT_OP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_OP(int i) {
			return GetToken(Python3Parser.NOT_OP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(Python3Parser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(Python3Parser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(Python3Parser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(Python3Parser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(Python3Parser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDIV() { return GetToken(Python3Parser.IDIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_SHIFT() { return GetToken(Python3Parser.LEFT_SHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SHIFT() { return GetToken(Python3Parser.RIGHT_SHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_OP() { return GetToken(Python3Parser.AND_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(Python3Parser.XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_OP() { return GetToken(Python3Parser.OR_OP, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 194;
		EnterRecursionRule(_localctx, 194, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1154;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case NUMBER:
			case AWAIT:
			case FALSE:
			case MATCH:
			case NONE:
			case TRUE:
			case UNDERSCORE:
			case NAME:
			case ELLIPSIS:
			case OPEN_PAREN:
			case OPEN_BRACK:
			case OPEN_BRACE:
				{
				State = 1147;
				atom_expr();
				}
				break;
			case ADD:
			case MINUS:
			case NOT_OP:
				{
				State = 1149;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1148;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & 35L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1151;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,146,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 1153;
				expr(7);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1179;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,149,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1177;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,148,Context) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1156;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 1157;
						Match(POWER);
						State = 1158;
						expr(9);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1159;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 1160;
						_la = TokenStream.LA(1);
						if ( !(((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & 1074659329L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1161;
						expr(7);
						}
						break;
					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1162;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1163;
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1164;
						expr(6);
						}
						break;
					case 4:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1165;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 1166;
						_la = TokenStream.LA(1);
						if ( !(_la==LEFT_SHIFT || _la==RIGHT_SHIFT) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1167;
						expr(5);
						}
						break;
					case 5:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1168;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1169;
						Match(AND_OP);
						State = 1170;
						expr(4);
						}
						break;
					case 6:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1171;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1172;
						Match(XOR);
						State = 1173;
						expr(3);
						}
						break;
					case 7:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 1174;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1175;
						Match(OR_OP);
						State = 1176;
						expr(2);
						}
						break;
					}
					} 
				}
				State = 1181;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,149,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Atom_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AWAIT() { return GetToken(Python3Parser.AWAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TrailerContext[] trailer() {
			return GetRuleContexts<TrailerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TrailerContext trailer(int i) {
			return GetRuleContext<TrailerContext>(i);
		}
		public Atom_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterAtom_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitAtom_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Atom_exprContext atom_expr() {
		Atom_exprContext _localctx = new Atom_exprContext(Context, State);
		EnterRule(_localctx, 196, RULE_atom_expr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AWAIT) {
				{
				State = 1182;
				Match(AWAIT);
				}
			}

			State = 1185;
			atom();
			State = 1189;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,151,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1186;
					trailer();
					}
					} 
				}
				State = 1191;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,151,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(Python3Parser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(Python3Parser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Yield_exprContext yield_expr() {
			return GetRuleContext<Yield_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Testlist_compContext testlist_comp() {
			return GetRuleContext<Testlist_compContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACK() { return GetToken(Python3Parser.OPEN_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACK() { return GetToken(Python3Parser.CLOSE_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(Python3Parser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(Python3Parser.CLOSE_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DictorsetmakerContext dictorsetmaker() {
			return GetRuleContext<DictorsetmakerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(Python3Parser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(Python3Parser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(Python3Parser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELLIPSIS() { return GetToken(Python3Parser.ELLIPSIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(Python3Parser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(Python3Parser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(Python3Parser.FALSE, 0); }
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 198, RULE_atom);
		int _la;
		try {
			int _alt;
			State = 1219;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1192;
				Match(OPEN_PAREN);
				State = 1195;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case YIELD:
					{
					State = 1193;
					yield_expr();
					}
					break;
				case STRING:
				case NUMBER:
				case AWAIT:
				case FALSE:
				case LAMBDA:
				case MATCH:
				case NONE:
				case NOT:
				case TRUE:
				case UNDERSCORE:
				case NAME:
				case ELLIPSIS:
				case STAR:
				case OPEN_PAREN:
				case OPEN_BRACK:
				case ADD:
				case MINUS:
				case NOT_OP:
				case OPEN_BRACE:
					{
					State = 1194;
					testlist_comp();
					}
					break;
				case CLOSE_PAREN:
					break;
				default:
					break;
				}
				State = 1197;
				Match(CLOSE_PAREN);
				}
				break;
			case OPEN_BRACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1198;
				Match(OPEN_BRACK);
				State = 1200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 252238150243451928L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 12673L) != 0)) {
					{
					State = 1199;
					testlist_comp();
					}
				}

				State = 1202;
				Match(CLOSE_BRACK);
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1203;
				Match(OPEN_BRACE);
				State = 1205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4863924168670839832L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 12673L) != 0)) {
					{
					State = 1204;
					dictorsetmaker();
					}
				}

				State = 1207;
				Match(CLOSE_BRACE);
				}
				break;
			case MATCH:
			case UNDERSCORE:
			case NAME:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1208;
				name();
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1209;
				Match(NUMBER);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1211;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1210;
						Match(STRING);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1213;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,155,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case ELLIPSIS:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1215;
				Match(ELLIPSIS);
				}
				break;
			case NONE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1216;
				Match(NONE);
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1217;
				Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1218;
				Match(FALSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(Python3Parser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDERSCORE() { return GetToken(Python3Parser.UNDERSCORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(Python3Parser.MATCH, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 200, RULE_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1221;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 36284957458432L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Testlist_compContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TestContext[] test() {
			return GetRuleContexts<TestContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test(int i) {
			return GetRuleContext<TestContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Star_exprContext[] star_expr() {
			return GetRuleContexts<Star_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Star_exprContext star_expr(int i) {
			return GetRuleContext<Star_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comp_forContext comp_for() {
			return GetRuleContext<Comp_forContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		public Testlist_compContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testlist_comp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterTestlist_comp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitTestlist_comp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestlist_comp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Testlist_compContext testlist_comp() {
		Testlist_compContext _localctx = new Testlist_compContext(Context, State);
		EnterRule(_localctx, 202, RULE_testlist_comp);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1225;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case NUMBER:
			case AWAIT:
			case FALSE:
			case LAMBDA:
			case MATCH:
			case NONE:
			case NOT:
			case TRUE:
			case UNDERSCORE:
			case NAME:
			case ELLIPSIS:
			case OPEN_PAREN:
			case OPEN_BRACK:
			case ADD:
			case MINUS:
			case NOT_OP:
			case OPEN_BRACE:
				{
				State = 1223;
				test();
				}
				break;
			case STAR:
				{
				State = 1224;
				star_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1241;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASYNC:
			case FOR:
				{
				State = 1227;
				comp_for();
				}
				break;
			case CLOSE_PAREN:
			case COMMA:
			case CLOSE_BRACK:
				{
				State = 1235;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,159,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1228;
						Match(COMMA);
						State = 1231;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case STRING:
						case NUMBER:
						case AWAIT:
						case FALSE:
						case LAMBDA:
						case MATCH:
						case NONE:
						case NOT:
						case TRUE:
						case UNDERSCORE:
						case NAME:
						case ELLIPSIS:
						case OPEN_PAREN:
						case OPEN_BRACK:
						case ADD:
						case MINUS:
						case NOT_OP:
						case OPEN_BRACE:
							{
							State = 1229;
							test();
							}
							break;
						case STAR:
							{
							State = 1230;
							star_expr();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						} 
					}
					State = 1237;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,159,Context);
				}
				State = 1239;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1238;
					Match(COMMA);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrailerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(Python3Parser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(Python3Parser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArglistContext arglist() {
			return GetRuleContext<ArglistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACK() { return GetToken(Python3Parser.OPEN_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubscriptlistContext subscriptlist() {
			return GetRuleContext<SubscriptlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACK() { return GetToken(Python3Parser.CLOSE_BRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(Python3Parser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public TrailerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trailer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterTrailer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitTrailer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrailer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrailerContext trailer() {
		TrailerContext _localctx = new TrailerContext(Context, State);
		EnterRule(_localctx, 204, RULE_trailer);
		int _la;
		try {
			State = 1254;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1243;
				Match(OPEN_PAREN);
				State = 1245;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4863924168670839832L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 12673L) != 0)) {
					{
					State = 1244;
					arglist();
					}
				}

				State = 1247;
				Match(CLOSE_PAREN);
				}
				break;
			case OPEN_BRACK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1248;
				Match(OPEN_BRACK);
				State = 1249;
				subscriptlist();
				State = 1250;
				Match(CLOSE_BRACK);
				}
				break;
			case DOT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1252;
				Match(DOT);
				State = 1253;
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Subscript_Context[] subscript_() {
			return GetRuleContexts<Subscript_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subscript_Context subscript_(int i) {
			return GetRuleContext<Subscript_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		public SubscriptlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscriptlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterSubscriptlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitSubscriptlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscriptlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptlistContext subscriptlist() {
		SubscriptlistContext _localctx = new SubscriptlistContext(Context, State);
		EnterRule(_localctx, 206, RULE_subscriptlist);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1256;
			subscript_();
			State = 1261;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,164,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1257;
					Match(COMMA);
					State = 1258;
					subscript_();
					}
					} 
				}
				State = 1263;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,164,Context);
			}
			State = 1265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1264;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subscript_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TestContext[] test() {
			return GetRuleContexts<TestContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test(int i) {
			return GetRuleContext<TestContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Python3Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SliceopContext sliceop() {
			return GetRuleContext<SliceopContext>(0);
		}
		public Subscript_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterSubscript_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitSubscript_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subscript_Context subscript_() {
		Subscript_Context _localctx = new Subscript_Context(Context, State);
		EnterRule(_localctx, 208, RULE_subscript_);
		int _la;
		try {
			State = 1278;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,169,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1267;
				test();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1269;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 180180556205523992L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 12673L) != 0)) {
					{
					State = 1268;
					test();
					}
				}

				State = 1271;
				Match(COLON);
				State = 1273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 180180556205523992L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 12673L) != 0)) {
					{
					State = 1272;
					test();
					}
				}

				State = 1276;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLON) {
					{
					State = 1275;
					sliceop();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SliceopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Python3Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test() {
			return GetRuleContext<TestContext>(0);
		}
		public SliceopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sliceop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterSliceop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitSliceop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SliceopContext sliceop() {
		SliceopContext _localctx = new SliceopContext(Context, State);
		EnterRule(_localctx, 210, RULE_sliceop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1280;
			Match(COLON);
			State = 1282;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 180180556205523992L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 12673L) != 0)) {
				{
				State = 1281;
				test();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Star_exprContext[] star_expr() {
			return GetRuleContexts<Star_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Star_exprContext star_expr(int i) {
			return GetRuleContext<Star_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		public ExprlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterExprlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitExprlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprlistContext exprlist() {
		ExprlistContext _localctx = new ExprlistContext(Context, State);
		EnterRule(_localctx, 212, RULE_exprlist);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1286;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case NUMBER:
			case AWAIT:
			case FALSE:
			case MATCH:
			case NONE:
			case TRUE:
			case UNDERSCORE:
			case NAME:
			case ELLIPSIS:
			case OPEN_PAREN:
			case OPEN_BRACK:
			case ADD:
			case MINUS:
			case NOT_OP:
			case OPEN_BRACE:
				{
				State = 1284;
				expr(0);
				}
				break;
			case STAR:
				{
				State = 1285;
				star_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1295;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,173,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1288;
					Match(COMMA);
					State = 1291;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case STRING:
					case NUMBER:
					case AWAIT:
					case FALSE:
					case MATCH:
					case NONE:
					case TRUE:
					case UNDERSCORE:
					case NAME:
					case ELLIPSIS:
					case OPEN_PAREN:
					case OPEN_BRACK:
					case ADD:
					case MINUS:
					case NOT_OP:
					case OPEN_BRACE:
						{
						State = 1289;
						expr(0);
						}
						break;
					case STAR:
						{
						State = 1290;
						star_expr();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				State = 1297;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,173,Context);
			}
			State = 1299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1298;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TestContext[] test() {
			return GetRuleContexts<TestContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test(int i) {
			return GetRuleContext<TestContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		public TestlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_testlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterTestlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitTestlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTestlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestlistContext testlist() {
		TestlistContext _localctx = new TestlistContext(Context, State);
		EnterRule(_localctx, 214, RULE_testlist);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1301;
			test();
			State = 1306;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,175,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1302;
					Match(COMMA);
					State = 1303;
					test();
					}
					} 
				}
				State = 1308;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,175,Context);
			}
			State = 1310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1309;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictorsetmakerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TestContext[] test() {
			return GetRuleContexts<TestContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test(int i) {
			return GetRuleContext<TestContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(Python3Parser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(Python3Parser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] POWER() { return GetTokens(Python3Parser.POWER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER(int i) {
			return GetToken(Python3Parser.POWER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comp_forContext comp_for() {
			return GetRuleContext<Comp_forContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Star_exprContext[] star_expr() {
			return GetRuleContexts<Star_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Star_exprContext star_expr(int i) {
			return GetRuleContext<Star_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		public DictorsetmakerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictorsetmaker; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterDictorsetmaker(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitDictorsetmaker(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictorsetmaker(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictorsetmakerContext dictorsetmaker() {
		DictorsetmakerContext _localctx = new DictorsetmakerContext(Context, State);
		EnterRule(_localctx, 216, RULE_dictorsetmaker);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1360;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,187,Context) ) {
			case 1:
				{
				{
				State = 1318;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING:
				case NUMBER:
				case AWAIT:
				case FALSE:
				case LAMBDA:
				case MATCH:
				case NONE:
				case NOT:
				case TRUE:
				case UNDERSCORE:
				case NAME:
				case ELLIPSIS:
				case OPEN_PAREN:
				case OPEN_BRACK:
				case ADD:
				case MINUS:
				case NOT_OP:
				case OPEN_BRACE:
					{
					State = 1312;
					test();
					State = 1313;
					Match(COLON);
					State = 1314;
					test();
					}
					break;
				case POWER:
					{
					State = 1316;
					Match(POWER);
					State = 1317;
					expr(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1338;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ASYNC:
				case FOR:
					{
					State = 1320;
					comp_for();
					}
					break;
				case COMMA:
				case CLOSE_BRACE:
					{
					State = 1332;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,179,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 1321;
							Match(COMMA);
							State = 1328;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case STRING:
							case NUMBER:
							case AWAIT:
							case FALSE:
							case LAMBDA:
							case MATCH:
							case NONE:
							case NOT:
							case TRUE:
							case UNDERSCORE:
							case NAME:
							case ELLIPSIS:
							case OPEN_PAREN:
							case OPEN_BRACK:
							case ADD:
							case MINUS:
							case NOT_OP:
							case OPEN_BRACE:
								{
								State = 1322;
								test();
								State = 1323;
								Match(COLON);
								State = 1324;
								test();
								}
								break;
							case POWER:
								{
								State = 1326;
								Match(POWER);
								State = 1327;
								expr(0);
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							} 
						}
						State = 1334;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,179,Context);
					}
					State = 1336;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 1335;
						Match(COMMA);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case 2:
				{
				{
				State = 1342;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING:
				case NUMBER:
				case AWAIT:
				case FALSE:
				case LAMBDA:
				case MATCH:
				case NONE:
				case NOT:
				case TRUE:
				case UNDERSCORE:
				case NAME:
				case ELLIPSIS:
				case OPEN_PAREN:
				case OPEN_BRACK:
				case ADD:
				case MINUS:
				case NOT_OP:
				case OPEN_BRACE:
					{
					State = 1340;
					test();
					}
					break;
				case STAR:
					{
					State = 1341;
					star_expr();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1358;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ASYNC:
				case FOR:
					{
					State = 1344;
					comp_for();
					}
					break;
				case COMMA:
				case CLOSE_BRACE:
					{
					State = 1352;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,184,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 1345;
							Match(COMMA);
							State = 1348;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case STRING:
							case NUMBER:
							case AWAIT:
							case FALSE:
							case LAMBDA:
							case MATCH:
							case NONE:
							case NOT:
							case TRUE:
							case UNDERSCORE:
							case NAME:
							case ELLIPSIS:
							case OPEN_PAREN:
							case OPEN_BRACK:
							case ADD:
							case MINUS:
							case NOT_OP:
							case OPEN_BRACE:
								{
								State = 1346;
								test();
								}
								break;
							case STAR:
								{
								State = 1347;
								star_expr();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							} 
						}
						State = 1354;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,184,Context);
					}
					State = 1356;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 1355;
						Match(COMMA);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassdefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(Python3Parser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(Python3Parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(Python3Parser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(Python3Parser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArglistContext arglist() {
			return GetRuleContext<ArglistContext>(0);
		}
		public ClassdefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classdef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterClassdef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitClassdef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassdef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassdefContext classdef() {
		ClassdefContext _localctx = new ClassdefContext(Context, State);
		EnterRule(_localctx, 218, RULE_classdef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1362;
			Match(CLASS);
			State = 1363;
			name();
			State = 1369;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAREN) {
				{
				State = 1364;
				Match(OPEN_PAREN);
				State = 1366;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4863924168670839832L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 12673L) != 0)) {
					{
					State = 1365;
					arglist();
					}
				}

				State = 1368;
				Match(CLOSE_PAREN);
				}
			}

			State = 1371;
			Match(COLON);
			State = 1372;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArglistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(Python3Parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(Python3Parser.COMMA, i);
		}
		public ArglistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arglist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterArglist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitArglist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArglist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArglistContext arglist() {
		ArglistContext _localctx = new ArglistContext(Context, State);
		EnterRule(_localctx, 220, RULE_arglist);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1374;
			argument();
			State = 1379;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,190,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1375;
					Match(COMMA);
					State = 1376;
					argument();
					}
					} 
				}
				State = 1381;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,190,Context);
			}
			State = 1383;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1382;
				Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TestContext[] test() {
			return GetRuleContexts<TestContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test(int i) {
			return GetRuleContext<TestContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(Python3Parser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(Python3Parser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(Python3Parser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Comp_forContext comp_for() {
			return GetRuleContext<Comp_forContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 222, RULE_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1397;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,193,Context) ) {
			case 1:
				{
				State = 1385;
				test();
				State = 1387;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASYNC || _la==FOR) {
					{
					State = 1386;
					comp_for();
					}
				}

				}
				break;
			case 2:
				{
				State = 1389;
				test();
				State = 1390;
				Match(ASSIGN);
				State = 1391;
				test();
				}
				break;
			case 3:
				{
				State = 1393;
				Match(POWER);
				State = 1394;
				test();
				}
				break;
			case 4:
				{
				State = 1395;
				Match(STAR);
				State = 1396;
				test();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comp_iterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Comp_forContext comp_for() {
			return GetRuleContext<Comp_forContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comp_ifContext comp_if() {
			return GetRuleContext<Comp_ifContext>(0);
		}
		public Comp_iterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comp_iter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterComp_iter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitComp_iter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComp_iter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comp_iterContext comp_iter() {
		Comp_iterContext _localctx = new Comp_iterContext(Context, State);
		EnterRule(_localctx, 224, RULE_comp_iter);
		try {
			State = 1401;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASYNC:
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1399;
				comp_for();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1400;
				comp_if();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comp_forContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(Python3Parser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprlistContext exprlist() {
			return GetRuleContext<ExprlistContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(Python3Parser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Or_testContext or_test() {
			return GetRuleContext<Or_testContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNC() { return GetToken(Python3Parser.ASYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Comp_iterContext comp_iter() {
			return GetRuleContext<Comp_iterContext>(0);
		}
		public Comp_forContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comp_for; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterComp_for(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitComp_for(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComp_for(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comp_forContext comp_for() {
		Comp_forContext _localctx = new Comp_forContext(Context, State);
		EnterRule(_localctx, 226, RULE_comp_for);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1404;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASYNC) {
				{
				State = 1403;
				Match(ASYNC);
				}
			}

			State = 1406;
			Match(FOR);
			State = 1407;
			exprlist();
			State = 1408;
			Match(IN);
			State = 1409;
			or_test();
			State = 1411;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 37749248L) != 0)) {
				{
				State = 1410;
				comp_iter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comp_ifContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(Python3Parser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Test_nocondContext test_nocond() {
			return GetRuleContext<Test_nocondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Comp_iterContext comp_iter() {
			return GetRuleContext<Comp_iterContext>(0);
		}
		public Comp_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comp_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterComp_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitComp_if(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComp_if(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comp_ifContext comp_if() {
		Comp_ifContext _localctx = new Comp_ifContext(Context, State);
		EnterRule(_localctx, 228, RULE_comp_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1413;
			Match(IF);
			State = 1414;
			test_nocond();
			State = 1416;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 37749248L) != 0)) {
				{
				State = 1415;
				comp_iter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Encoding_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Encoding_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_encoding_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterEncoding_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitEncoding_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEncoding_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Encoding_declContext encoding_decl() {
		Encoding_declContext _localctx = new Encoding_declContext(Context, State);
		EnterRule(_localctx, 230, RULE_encoding_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1418;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Yield_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YIELD() { return GetToken(Python3Parser.YIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Yield_argContext yield_arg() {
			return GetRuleContext<Yield_argContext>(0);
		}
		public Yield_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yield_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterYield_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitYield_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYield_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Yield_exprContext yield_expr() {
		Yield_exprContext _localctx = new Yield_exprContext(Context, State);
		EnterRule(_localctx, 232, RULE_yield_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1420;
			Match(YIELD);
			State = 1422;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 180180556213912600L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 12673L) != 0)) {
				{
				State = 1421;
				yield_arg();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Yield_argContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(Python3Parser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TestContext test() {
			return GetRuleContext<TestContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TestlistContext testlist() {
			return GetRuleContext<TestlistContext>(0);
		}
		public Yield_argContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yield_arg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterYield_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitYield_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYield_arg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Yield_argContext yield_arg() {
		Yield_argContext _localctx = new Yield_argContext(Context, State);
		EnterRule(_localctx, 234, RULE_yield_arg);
		try {
			State = 1427;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FROM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1424;
				Match(FROM);
				State = 1425;
				test();
				}
				break;
			case STRING:
			case NUMBER:
			case AWAIT:
			case FALSE:
			case LAMBDA:
			case MATCH:
			case NONE:
			case NOT:
			case TRUE:
			case UNDERSCORE:
			case NAME:
			case ELLIPSIS:
			case OPEN_PAREN:
			case OPEN_BRACK:
			case ADD:
			case MINUS:
			case NOT_OP:
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1426;
				testlist();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(Python3Parser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(Python3Parser.STRING, i);
		}
		public StringsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.EnterStrings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPython3ParserListener typedListener = listener as IPython3ParserListener;
			if (typedListener != null) typedListener.ExitStrings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPython3ParserVisitor<TResult> typedVisitor = visitor as IPython3ParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringsContext strings() {
		StringsContext _localctx = new StringsContext(Context, State);
		EnterRule(_localctx, 236, RULE_strings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1430;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1429;
				Match(STRING);
				}
				}
				State = 1432;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==STRING );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 60: return literal_pattern_sempred((Literal_patternContext)_localctx, predIndex);
		case 61: return literal_expr_sempred((Literal_exprContext)_localctx, predIndex);
		case 68: return pattern_capture_target_sempred((Pattern_capture_targetContext)_localctx, predIndex);
		case 70: return value_pattern_sempred((Value_patternContext)_localctx, predIndex);
		case 97: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool literal_pattern_sempred(Literal_patternContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return  this.CannotBePlusMinus() ;
		}
		return true;
	}
	private bool literal_expr_sempred(Literal_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return  this.CannotBePlusMinus() ;
		}
		return true;
	}
	private bool pattern_capture_target_sempred(Pattern_capture_targetContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return  this.CannotBeDotLpEq() ;
		}
		return true;
	}
	private bool value_pattern_sempred(Value_patternContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return  this.CannotBeDotLpEq() ;
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 8);
		case 5: return Precpred(Context, 6);
		case 6: return Precpred(Context, 5);
		case 7: return Precpred(Context, 4);
		case 8: return Precpred(Context, 3);
		case 9: return Precpred(Context, 2);
		case 10: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,102,1435,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,1,0,1,0,1,0,1,0,1,0,3,0,244,8,0,1,1,1,1,5,1,248,
		8,1,10,1,12,1,251,9,1,1,1,1,1,1,2,1,2,5,2,257,8,2,10,2,12,2,260,9,2,1,
		2,1,2,1,3,1,3,1,3,1,3,3,3,268,8,3,1,3,3,3,271,8,3,1,3,1,3,1,4,4,4,276,
		8,4,11,4,12,4,277,1,5,1,5,1,5,1,5,3,5,284,8,5,1,6,1,6,1,6,1,7,1,7,1,7,
		1,7,1,7,3,7,294,8,7,1,7,1,7,1,7,1,8,1,8,3,8,301,8,8,1,8,1,8,1,9,1,9,1,
		9,3,9,308,8,9,1,9,1,9,1,9,1,9,3,9,314,8,9,5,9,316,8,9,10,9,12,9,319,9,
		9,1,9,1,9,1,9,3,9,324,8,9,1,9,1,9,1,9,1,9,3,9,330,8,9,5,9,332,8,9,10,9,
		12,9,335,9,9,1,9,1,9,1,9,1,9,3,9,341,8,9,3,9,343,8,9,3,9,345,8,9,1,9,1,
		9,1,9,3,9,350,8,9,3,9,352,8,9,3,9,354,8,9,1,9,1,9,3,9,358,8,9,1,9,1,9,
		1,9,1,9,3,9,364,8,9,5,9,366,8,9,10,9,12,9,369,9,9,1,9,1,9,1,9,1,9,3,9,
		375,8,9,3,9,377,8,9,3,9,379,8,9,1,9,1,9,1,9,3,9,384,8,9,3,9,386,8,9,1,
		10,1,10,1,10,3,10,391,8,10,1,11,1,11,1,11,3,11,396,8,11,1,11,1,11,1,11,
		1,11,3,11,402,8,11,5,11,404,8,11,10,11,12,11,407,9,11,1,11,1,11,1,11,3,
		11,412,8,11,1,11,1,11,1,11,1,11,3,11,418,8,11,5,11,420,8,11,10,11,12,11,
		423,9,11,1,11,1,11,1,11,1,11,3,11,429,8,11,3,11,431,8,11,3,11,433,8,11,
		1,11,1,11,1,11,3,11,438,8,11,3,11,440,8,11,3,11,442,8,11,1,11,1,11,3,11,
		446,8,11,1,11,1,11,1,11,1,11,3,11,452,8,11,5,11,454,8,11,10,11,12,11,457,
		9,11,1,11,1,11,1,11,1,11,3,11,463,8,11,3,11,465,8,11,3,11,467,8,11,1,11,
		1,11,1,11,3,11,472,8,11,3,11,474,8,11,1,12,1,12,1,13,1,13,3,13,480,8,13,
		1,14,1,14,1,14,5,14,485,8,14,10,14,12,14,488,9,14,1,14,3,14,491,8,14,1,
		14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,503,8,15,1,16,1,16,
		1,16,1,16,1,16,3,16,510,8,16,1,16,1,16,1,16,3,16,515,8,16,5,16,517,8,16,
		10,16,12,16,520,9,16,3,16,522,8,16,1,17,1,17,1,17,1,17,3,17,528,8,17,1,
		18,1,18,3,18,532,8,18,1,18,1,18,1,18,3,18,537,8,18,5,18,539,8,18,10,18,
		12,18,542,9,18,1,18,3,18,545,8,18,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,
		22,1,22,1,22,1,22,1,22,3,22,559,8,22,1,23,1,23,1,24,1,24,1,25,1,25,3,25,
		567,8,25,1,26,1,26,1,27,1,27,1,27,1,27,3,27,575,8,27,3,27,577,8,27,1,28,
		1,28,3,28,581,8,28,1,29,1,29,1,29,1,30,1,30,5,30,588,8,30,10,30,12,30,
		591,9,30,1,30,1,30,4,30,595,8,30,11,30,12,30,596,3,30,599,8,30,1,30,1,
		30,1,30,1,30,1,30,1,30,1,30,3,30,608,8,30,1,31,1,31,1,31,3,31,613,8,31,
		1,32,1,32,1,32,3,32,618,8,32,1,33,1,33,1,33,5,33,623,8,33,10,33,12,33,
		626,9,33,1,33,3,33,629,8,33,1,34,1,34,1,34,5,34,634,8,34,10,34,12,34,637,
		9,34,1,35,1,35,1,35,5,35,642,8,35,10,35,12,35,645,9,35,1,36,1,36,1,36,
		1,36,5,36,651,8,36,10,36,12,36,654,9,36,1,37,1,37,1,37,1,37,5,37,660,8,
		37,10,37,12,37,663,9,37,1,38,1,38,1,38,1,38,3,38,669,8,38,1,39,1,39,1,
		39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,681,8,39,1,40,1,40,1,40,1,40,
		3,40,687,8,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,5,41,698,8,
		41,10,41,12,41,701,9,41,1,41,1,41,1,41,3,41,706,8,41,1,42,1,42,1,42,1,
		42,1,42,1,42,1,42,3,42,715,8,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
		1,43,3,43,726,8,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,4,44,735,8,44,11,
		44,12,44,736,1,44,1,44,1,44,3,44,742,8,44,1,44,1,44,1,44,3,44,747,8,44,
		1,44,1,44,1,44,3,44,752,8,44,1,45,1,45,1,45,1,45,5,45,758,8,45,10,45,12,
		45,761,9,45,1,45,1,45,1,45,1,46,1,46,1,46,3,46,769,8,46,1,47,1,47,1,47,
		1,47,3,47,775,8,47,3,47,777,8,47,1,48,1,48,1,48,1,48,4,48,783,8,48,11,
		48,12,48,784,1,48,1,48,3,48,789,8,48,1,49,1,49,1,49,1,49,1,49,1,49,4,49,
		797,8,49,11,49,12,49,798,1,49,1,49,1,50,1,50,1,50,3,50,806,8,50,1,50,3,
		50,809,8,50,1,51,1,51,4,51,813,8,51,11,51,12,51,814,1,51,3,51,818,8,51,
		1,52,1,52,1,52,3,52,823,8,52,1,53,1,53,1,53,3,53,828,8,53,1,53,1,53,1,
		53,1,54,1,54,1,54,1,55,1,55,3,55,838,8,55,1,56,1,56,3,56,842,8,56,1,57,
		1,57,1,57,1,57,1,58,1,58,1,58,5,58,851,8,58,10,58,12,58,854,9,58,1,59,
		1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,864,8,59,1,60,1,60,1,60,1,60,1,
		60,1,60,1,60,1,60,3,60,874,8,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,
		3,61,884,8,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,894,8,62,1,
		63,1,63,1,63,3,63,899,8,63,1,64,1,64,1,64,3,64,904,8,64,1,65,1,65,1,66,
		1,66,1,67,1,67,1,68,1,68,1,68,1,69,1,69,1,70,1,70,1,70,1,71,1,71,1,71,
		4,71,923,8,71,11,71,12,71,924,1,72,1,72,3,72,929,8,72,1,73,1,73,1,73,1,
		73,1,74,1,74,3,74,937,8,74,1,74,1,74,1,74,3,74,942,8,74,1,74,3,74,945,
		8,74,1,75,1,75,1,75,3,75,950,8,75,1,76,1,76,1,76,5,76,955,8,76,10,76,12,
		76,958,9,76,1,76,3,76,961,8,76,1,77,1,77,3,77,965,8,77,1,78,1,78,1,78,
		1,78,3,78,971,8,78,1,79,1,79,1,79,1,79,1,79,3,79,978,8,79,1,79,1,79,1,
		79,1,79,1,79,1,79,1,79,3,79,987,8,79,1,79,1,79,1,79,1,79,1,79,3,79,994,
		8,79,1,79,1,79,3,79,998,8,79,1,80,1,80,1,80,5,80,1003,8,80,10,80,12,80,
		1006,9,80,1,81,1,81,3,81,1010,8,81,1,81,1,81,1,81,1,82,1,82,1,82,1,83,
		1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1026,8,83,1,83,1,83,1,83,1,83,
		1,83,1,83,3,83,1034,8,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,
		1044,8,83,1,83,1,83,3,83,1048,8,83,1,84,1,84,1,84,5,84,1053,8,84,10,84,
		12,84,1056,9,84,1,85,1,85,1,85,5,85,1061,8,85,10,85,12,85,1064,9,85,1,
		86,1,86,1,86,1,86,1,87,1,87,1,87,1,87,1,87,1,87,3,87,1076,8,87,1,87,3,
		87,1079,8,87,1,88,1,88,3,88,1083,8,88,1,89,1,89,3,89,1087,8,89,1,89,1,
		89,1,89,1,90,1,90,3,90,1094,8,90,1,90,1,90,1,90,1,91,1,91,1,91,5,91,1102,
		8,91,10,91,12,91,1105,9,91,1,92,1,92,1,92,5,92,1110,8,92,10,92,12,92,1113,
		9,92,1,93,1,93,1,93,3,93,1118,8,93,1,94,1,94,1,94,1,94,5,94,1124,8,94,
		10,94,12,94,1127,9,94,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,
		1,95,1,95,1,95,3,95,1142,8,95,1,96,1,96,1,96,1,97,1,97,1,97,4,97,1150,
		8,97,11,97,12,97,1151,1,97,3,97,1155,8,97,1,97,1,97,1,97,1,97,1,97,1,97,
		1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,
		1,97,5,97,1178,8,97,10,97,12,97,1181,9,97,1,98,3,98,1184,8,98,1,98,1,98,
		5,98,1188,8,98,10,98,12,98,1191,9,98,1,99,1,99,1,99,3,99,1196,8,99,1,99,
		1,99,1,99,3,99,1201,8,99,1,99,1,99,1,99,3,99,1206,8,99,1,99,1,99,1,99,
		1,99,4,99,1212,8,99,11,99,12,99,1213,1,99,1,99,1,99,1,99,3,99,1220,8,99,
		1,100,1,100,1,101,1,101,3,101,1226,8,101,1,101,1,101,1,101,1,101,3,101,
		1232,8,101,5,101,1234,8,101,10,101,12,101,1237,9,101,1,101,3,101,1240,
		8,101,3,101,1242,8,101,1,102,1,102,3,102,1246,8,102,1,102,1,102,1,102,
		1,102,1,102,1,102,1,102,3,102,1255,8,102,1,103,1,103,1,103,5,103,1260,
		8,103,10,103,12,103,1263,9,103,1,103,3,103,1266,8,103,1,104,1,104,3,104,
		1270,8,104,1,104,1,104,3,104,1274,8,104,1,104,3,104,1277,8,104,3,104,1279,
		8,104,1,105,1,105,3,105,1283,8,105,1,106,1,106,3,106,1287,8,106,1,106,
		1,106,1,106,3,106,1292,8,106,5,106,1294,8,106,10,106,12,106,1297,9,106,
		1,106,3,106,1300,8,106,1,107,1,107,1,107,5,107,1305,8,107,10,107,12,107,
		1308,9,107,1,107,3,107,1311,8,107,1,108,1,108,1,108,1,108,1,108,1,108,
		3,108,1319,8,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,3,108,
		1329,8,108,5,108,1331,8,108,10,108,12,108,1334,9,108,1,108,3,108,1337,
		8,108,3,108,1339,8,108,1,108,1,108,3,108,1343,8,108,1,108,1,108,1,108,
		1,108,3,108,1349,8,108,5,108,1351,8,108,10,108,12,108,1354,9,108,1,108,
		3,108,1357,8,108,3,108,1359,8,108,3,108,1361,8,108,1,109,1,109,1,109,1,
		109,3,109,1367,8,109,1,109,3,109,1370,8,109,1,109,1,109,1,109,1,110,1,
		110,1,110,5,110,1378,8,110,10,110,12,110,1381,9,110,1,110,3,110,1384,8,
		110,1,111,1,111,3,111,1388,8,111,1,111,1,111,1,111,1,111,1,111,1,111,1,
		111,1,111,3,111,1398,8,111,1,112,1,112,3,112,1402,8,112,1,113,3,113,1405,
		8,113,1,113,1,113,1,113,1,113,1,113,3,113,1412,8,113,1,114,1,114,1,114,
		3,114,1417,8,114,1,115,1,115,1,116,1,116,3,116,1423,8,116,1,117,1,117,
		1,117,3,117,1428,8,117,1,118,4,118,1431,8,118,11,118,12,118,1432,1,118,
		0,1,194,119,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
		42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,
		90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
		128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,
		164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,
		200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,
		236,0,7,1,0,88,100,1,0,54,55,2,0,71,72,76,76,3,0,56,56,73,75,86,86,1,0,
		71,72,1,0,69,70,3,0,30,30,40,40,45,45,1586,0,243,1,0,0,0,2,249,1,0,0,0,
		4,254,1,0,0,0,6,263,1,0,0,0,8,275,1,0,0,0,10,279,1,0,0,0,12,285,1,0,0,
		0,14,288,1,0,0,0,16,298,1,0,0,0,18,385,1,0,0,0,20,387,1,0,0,0,22,473,1,
		0,0,0,24,475,1,0,0,0,26,479,1,0,0,0,28,481,1,0,0,0,30,502,1,0,0,0,32,504,
		1,0,0,0,34,523,1,0,0,0,36,531,1,0,0,0,38,546,1,0,0,0,40,548,1,0,0,0,42,
		551,1,0,0,0,44,558,1,0,0,0,46,560,1,0,0,0,48,562,1,0,0,0,50,564,1,0,0,
		0,52,568,1,0,0,0,54,570,1,0,0,0,56,580,1,0,0,0,58,582,1,0,0,0,60,585,1,
		0,0,0,62,609,1,0,0,0,64,614,1,0,0,0,66,619,1,0,0,0,68,630,1,0,0,0,70,638,
		1,0,0,0,72,646,1,0,0,0,74,655,1,0,0,0,76,664,1,0,0,0,78,680,1,0,0,0,80,
		682,1,0,0,0,82,688,1,0,0,0,84,707,1,0,0,0,86,716,1,0,0,0,88,727,1,0,0,
		0,90,753,1,0,0,0,92,765,1,0,0,0,94,770,1,0,0,0,96,788,1,0,0,0,98,790,1,
		0,0,0,100,808,1,0,0,0,102,810,1,0,0,0,104,822,1,0,0,0,106,824,1,0,0,0,
		108,832,1,0,0,0,110,837,1,0,0,0,112,841,1,0,0,0,114,843,1,0,0,0,116,847,
		1,0,0,0,118,863,1,0,0,0,120,873,1,0,0,0,122,883,1,0,0,0,124,893,1,0,0,
		0,126,898,1,0,0,0,128,903,1,0,0,0,130,905,1,0,0,0,132,907,1,0,0,0,134,
		909,1,0,0,0,136,911,1,0,0,0,138,914,1,0,0,0,140,916,1,0,0,0,142,919,1,
		0,0,0,144,928,1,0,0,0,146,930,1,0,0,0,148,944,1,0,0,0,150,946,1,0,0,0,
		152,951,1,0,0,0,154,964,1,0,0,0,156,970,1,0,0,0,158,997,1,0,0,0,160,999,
		1,0,0,0,162,1009,1,0,0,0,164,1014,1,0,0,0,166,1047,1,0,0,0,168,1049,1,
		0,0,0,170,1057,1,0,0,0,172,1065,1,0,0,0,174,1078,1,0,0,0,176,1082,1,0,
		0,0,178,1084,1,0,0,0,180,1091,1,0,0,0,182,1098,1,0,0,0,184,1106,1,0,0,
		0,186,1117,1,0,0,0,188,1119,1,0,0,0,190,1141,1,0,0,0,192,1143,1,0,0,0,
		194,1154,1,0,0,0,196,1183,1,0,0,0,198,1219,1,0,0,0,200,1221,1,0,0,0,202,
		1225,1,0,0,0,204,1254,1,0,0,0,206,1256,1,0,0,0,208,1278,1,0,0,0,210,1280,
		1,0,0,0,212,1286,1,0,0,0,214,1301,1,0,0,0,216,1360,1,0,0,0,218,1362,1,
		0,0,0,220,1374,1,0,0,0,222,1397,1,0,0,0,224,1401,1,0,0,0,226,1404,1,0,
		0,0,228,1413,1,0,0,0,230,1418,1,0,0,0,232,1420,1,0,0,0,234,1427,1,0,0,
		0,236,1430,1,0,0,0,238,244,5,44,0,0,239,244,3,28,14,0,240,241,3,78,39,
		0,241,242,5,44,0,0,242,244,1,0,0,0,243,238,1,0,0,0,243,239,1,0,0,0,243,
		240,1,0,0,0,244,1,1,0,0,0,245,248,5,44,0,0,246,248,3,26,13,0,247,245,1,
		0,0,0,247,246,1,0,0,0,248,251,1,0,0,0,249,247,1,0,0,0,249,250,1,0,0,0,
		250,252,1,0,0,0,251,249,1,0,0,0,252,253,5,0,0,1,253,3,1,0,0,0,254,258,
		3,214,107,0,255,257,5,44,0,0,256,255,1,0,0,0,257,260,1,0,0,0,258,256,1,
		0,0,0,258,259,1,0,0,0,259,261,1,0,0,0,260,258,1,0,0,0,261,262,5,0,0,1,
		262,5,1,0,0,0,263,264,5,86,0,0,264,270,3,70,35,0,265,267,5,57,0,0,266,
		268,3,220,110,0,267,266,1,0,0,0,267,268,1,0,0,0,268,269,1,0,0,0,269,271,
		5,58,0,0,270,265,1,0,0,0,270,271,1,0,0,0,271,272,1,0,0,0,272,273,5,44,
		0,0,273,7,1,0,0,0,274,276,3,6,3,0,275,274,1,0,0,0,276,277,1,0,0,0,277,
		275,1,0,0,0,277,278,1,0,0,0,278,9,1,0,0,0,279,283,3,8,4,0,280,284,3,218,
		109,0,281,284,3,14,7,0,282,284,3,12,6,0,283,280,1,0,0,0,283,281,1,0,0,
		0,283,282,1,0,0,0,284,11,1,0,0,0,285,286,5,9,0,0,286,287,3,14,7,0,287,
		13,1,0,0,0,288,289,5,15,0,0,289,290,3,200,100,0,290,293,3,16,8,0,291,292,
		5,87,0,0,292,294,3,174,87,0,293,291,1,0,0,0,293,294,1,0,0,0,294,295,1,
		0,0,0,295,296,5,60,0,0,296,297,3,96,48,0,297,15,1,0,0,0,298,300,5,57,0,
		0,299,301,3,18,9,0,300,299,1,0,0,0,300,301,1,0,0,0,301,302,1,0,0,0,302,
		303,5,58,0,0,303,17,1,0,0,0,304,307,3,20,10,0,305,306,5,63,0,0,306,308,
		3,174,87,0,307,305,1,0,0,0,307,308,1,0,0,0,308,317,1,0,0,0,309,310,5,59,
		0,0,310,313,3,20,10,0,311,312,5,63,0,0,312,314,3,174,87,0,313,311,1,0,
		0,0,313,314,1,0,0,0,314,316,1,0,0,0,315,309,1,0,0,0,316,319,1,0,0,0,317,
		315,1,0,0,0,317,318,1,0,0,0,318,353,1,0,0,0,319,317,1,0,0,0,320,351,5,
		59,0,0,321,323,5,56,0,0,322,324,3,20,10,0,323,322,1,0,0,0,323,324,1,0,
		0,0,324,333,1,0,0,0,325,326,5,59,0,0,326,329,3,20,10,0,327,328,5,63,0,
		0,328,330,3,174,87,0,329,327,1,0,0,0,329,330,1,0,0,0,330,332,1,0,0,0,331,
		325,1,0,0,0,332,335,1,0,0,0,333,331,1,0,0,0,333,334,1,0,0,0,334,344,1,
		0,0,0,335,333,1,0,0,0,336,342,5,59,0,0,337,338,5,62,0,0,338,340,3,20,10,
		0,339,341,5,59,0,0,340,339,1,0,0,0,340,341,1,0,0,0,341,343,1,0,0,0,342,
		337,1,0,0,0,342,343,1,0,0,0,343,345,1,0,0,0,344,336,1,0,0,0,344,345,1,
		0,0,0,345,352,1,0,0,0,346,347,5,62,0,0,347,349,3,20,10,0,348,350,5,59,
		0,0,349,348,1,0,0,0,349,350,1,0,0,0,350,352,1,0,0,0,351,321,1,0,0,0,351,
		346,1,0,0,0,351,352,1,0,0,0,352,354,1,0,0,0,353,320,1,0,0,0,353,354,1,
		0,0,0,354,386,1,0,0,0,355,357,5,56,0,0,356,358,3,20,10,0,357,356,1,0,0,
		0,357,358,1,0,0,0,358,367,1,0,0,0,359,360,5,59,0,0,360,363,3,20,10,0,361,
		362,5,63,0,0,362,364,3,174,87,0,363,361,1,0,0,0,363,364,1,0,0,0,364,366,
		1,0,0,0,365,359,1,0,0,0,366,369,1,0,0,0,367,365,1,0,0,0,367,368,1,0,0,
		0,368,378,1,0,0,0,369,367,1,0,0,0,370,376,5,59,0,0,371,372,5,62,0,0,372,
		374,3,20,10,0,373,375,5,59,0,0,374,373,1,0,0,0,374,375,1,0,0,0,375,377,
		1,0,0,0,376,371,1,0,0,0,376,377,1,0,0,0,377,379,1,0,0,0,378,370,1,0,0,
		0,378,379,1,0,0,0,379,386,1,0,0,0,380,381,5,62,0,0,381,383,3,20,10,0,382,
		384,5,59,0,0,383,382,1,0,0,0,383,384,1,0,0,0,384,386,1,0,0,0,385,304,1,
		0,0,0,385,355,1,0,0,0,385,380,1,0,0,0,386,19,1,0,0,0,387,390,3,200,100,
		0,388,389,5,60,0,0,389,391,3,174,87,0,390,388,1,0,0,0,390,391,1,0,0,0,
		391,21,1,0,0,0,392,395,3,24,12,0,393,394,5,63,0,0,394,396,3,174,87,0,395,
		393,1,0,0,0,395,396,1,0,0,0,396,405,1,0,0,0,397,398,5,59,0,0,398,401,3,
		24,12,0,399,400,5,63,0,0,400,402,3,174,87,0,401,399,1,0,0,0,401,402,1,
		0,0,0,402,404,1,0,0,0,403,397,1,0,0,0,404,407,1,0,0,0,405,403,1,0,0,0,
		405,406,1,0,0,0,406,441,1,0,0,0,407,405,1,0,0,0,408,439,5,59,0,0,409,411,
		5,56,0,0,410,412,3,24,12,0,411,410,1,0,0,0,411,412,1,0,0,0,412,421,1,0,
		0,0,413,414,5,59,0,0,414,417,3,24,12,0,415,416,5,63,0,0,416,418,3,174,
		87,0,417,415,1,0,0,0,417,418,1,0,0,0,418,420,1,0,0,0,419,413,1,0,0,0,420,
		423,1,0,0,0,421,419,1,0,0,0,421,422,1,0,0,0,422,432,1,0,0,0,423,421,1,
		0,0,0,424,430,5,59,0,0,425,426,5,62,0,0,426,428,3,24,12,0,427,429,5,59,
		0,0,428,427,1,0,0,0,428,429,1,0,0,0,429,431,1,0,0,0,430,425,1,0,0,0,430,
		431,1,0,0,0,431,433,1,0,0,0,432,424,1,0,0,0,432,433,1,0,0,0,433,440,1,
		0,0,0,434,435,5,62,0,0,435,437,3,24,12,0,436,438,5,59,0,0,437,436,1,0,
		0,0,437,438,1,0,0,0,438,440,1,0,0,0,439,409,1,0,0,0,439,434,1,0,0,0,439,
		440,1,0,0,0,440,442,1,0,0,0,441,408,1,0,0,0,441,442,1,0,0,0,442,474,1,
		0,0,0,443,445,5,56,0,0,444,446,3,24,12,0,445,444,1,0,0,0,445,446,1,0,0,
		0,446,455,1,0,0,0,447,448,5,59,0,0,448,451,3,24,12,0,449,450,5,63,0,0,
		450,452,3,174,87,0,451,449,1,0,0,0,451,452,1,0,0,0,452,454,1,0,0,0,453,
		447,1,0,0,0,454,457,1,0,0,0,455,453,1,0,0,0,455,456,1,0,0,0,456,466,1,
		0,0,0,457,455,1,0,0,0,458,464,5,59,0,0,459,460,5,62,0,0,460,462,3,24,12,
		0,461,463,5,59,0,0,462,461,1,0,0,0,462,463,1,0,0,0,463,465,1,0,0,0,464,
		459,1,0,0,0,464,465,1,0,0,0,465,467,1,0,0,0,466,458,1,0,0,0,466,467,1,
		0,0,0,467,474,1,0,0,0,468,469,5,62,0,0,469,471,3,24,12,0,470,472,5,59,
		0,0,471,470,1,0,0,0,471,472,1,0,0,0,472,474,1,0,0,0,473,392,1,0,0,0,473,
		443,1,0,0,0,473,468,1,0,0,0,474,23,1,0,0,0,475,476,3,200,100,0,476,25,
		1,0,0,0,477,480,3,28,14,0,478,480,3,78,39,0,479,477,1,0,0,0,479,478,1,
		0,0,0,480,27,1,0,0,0,481,486,3,30,15,0,482,483,5,61,0,0,483,485,3,30,15,
		0,484,482,1,0,0,0,485,488,1,0,0,0,486,484,1,0,0,0,486,487,1,0,0,0,487,
		490,1,0,0,0,488,486,1,0,0,0,489,491,5,61,0,0,490,489,1,0,0,0,490,491,1,
		0,0,0,491,492,1,0,0,0,492,493,5,44,0,0,493,29,1,0,0,0,494,503,3,32,16,
		0,495,503,3,40,20,0,496,503,3,42,21,0,497,503,3,44,22,0,498,503,3,56,28,
		0,499,503,3,72,36,0,500,503,3,74,37,0,501,503,3,76,38,0,502,494,1,0,0,
		0,502,495,1,0,0,0,502,496,1,0,0,0,502,497,1,0,0,0,502,498,1,0,0,0,502,
		499,1,0,0,0,502,500,1,0,0,0,502,501,1,0,0,0,503,31,1,0,0,0,504,521,3,36,
		18,0,505,522,3,34,17,0,506,509,3,38,19,0,507,510,3,232,116,0,508,510,3,
		214,107,0,509,507,1,0,0,0,509,508,1,0,0,0,510,522,1,0,0,0,511,514,5,63,
		0,0,512,515,3,232,116,0,513,515,3,36,18,0,514,512,1,0,0,0,514,513,1,0,
		0,0,515,517,1,0,0,0,516,511,1,0,0,0,517,520,1,0,0,0,518,516,1,0,0,0,518,
		519,1,0,0,0,519,522,1,0,0,0,520,518,1,0,0,0,521,505,1,0,0,0,521,506,1,
		0,0,0,521,518,1,0,0,0,522,33,1,0,0,0,523,524,5,60,0,0,524,527,3,174,87,
		0,525,526,5,63,0,0,526,528,3,174,87,0,527,525,1,0,0,0,527,528,1,0,0,0,
		528,35,1,0,0,0,529,532,3,174,87,0,530,532,3,192,96,0,531,529,1,0,0,0,531,
		530,1,0,0,0,532,540,1,0,0,0,533,536,5,59,0,0,534,537,3,174,87,0,535,537,
		3,192,96,0,536,534,1,0,0,0,536,535,1,0,0,0,537,539,1,0,0,0,538,533,1,0,
		0,0,539,542,1,0,0,0,540,538,1,0,0,0,540,541,1,0,0,0,541,544,1,0,0,0,542,
		540,1,0,0,0,543,545,5,59,0,0,544,543,1,0,0,0,544,545,1,0,0,0,545,37,1,
		0,0,0,546,547,7,0,0,0,547,39,1,0,0,0,548,549,5,16,0,0,549,550,3,212,106,
		0,550,41,1,0,0,0,551,552,5,35,0,0,552,43,1,0,0,0,553,559,3,46,23,0,554,
		559,3,48,24,0,555,559,3,50,25,0,556,559,3,54,27,0,557,559,3,52,26,0,558,
		553,1,0,0,0,558,554,1,0,0,0,558,555,1,0,0,0,558,556,1,0,0,0,558,557,1,
		0,0,0,559,45,1,0,0,0,560,561,5,11,0,0,561,47,1,0,0,0,562,563,5,14,0,0,
		563,49,1,0,0,0,564,566,5,37,0,0,565,567,3,214,107,0,566,565,1,0,0,0,566,
		567,1,0,0,0,567,51,1,0,0,0,568,569,3,232,116,0,569,53,1,0,0,0,570,576,
		5,36,0,0,571,574,3,174,87,0,572,573,5,23,0,0,573,575,3,174,87,0,574,572,
		1,0,0,0,574,575,1,0,0,0,575,577,1,0,0,0,576,571,1,0,0,0,576,577,1,0,0,
		0,577,55,1,0,0,0,578,581,3,58,29,0,579,581,3,60,30,0,580,578,1,0,0,0,580,
		579,1,0,0,0,581,57,1,0,0,0,582,583,5,26,0,0,583,584,3,68,34,0,584,59,1,
		0,0,0,585,598,5,23,0,0,586,588,7,1,0,0,587,586,1,0,0,0,588,591,1,0,0,0,
		589,587,1,0,0,0,589,590,1,0,0,0,590,592,1,0,0,0,591,589,1,0,0,0,592,599,
		3,70,35,0,593,595,7,1,0,0,594,593,1,0,0,0,595,596,1,0,0,0,596,594,1,0,
		0,0,596,597,1,0,0,0,597,599,1,0,0,0,598,589,1,0,0,0,598,594,1,0,0,0,599,
		600,1,0,0,0,600,607,5,26,0,0,601,608,5,56,0,0,602,603,5,57,0,0,603,604,
		3,66,33,0,604,605,5,58,0,0,605,608,1,0,0,0,606,608,3,66,33,0,607,601,1,
		0,0,0,607,602,1,0,0,0,607,606,1,0,0,0,608,61,1,0,0,0,609,612,3,200,100,
		0,610,611,5,7,0,0,611,613,3,200,100,0,612,610,1,0,0,0,612,613,1,0,0,0,
		613,63,1,0,0,0,614,617,3,70,35,0,615,616,5,7,0,0,616,618,3,200,100,0,617,
		615,1,0,0,0,617,618,1,0,0,0,618,65,1,0,0,0,619,624,3,62,31,0,620,621,5,
		59,0,0,621,623,3,62,31,0,622,620,1,0,0,0,623,626,1,0,0,0,624,622,1,0,0,
		0,624,625,1,0,0,0,625,628,1,0,0,0,626,624,1,0,0,0,627,629,5,59,0,0,628,
		627,1,0,0,0,628,629,1,0,0,0,629,67,1,0,0,0,630,635,3,64,32,0,631,632,5,
		59,0,0,632,634,3,64,32,0,633,631,1,0,0,0,634,637,1,0,0,0,635,633,1,0,0,
		0,635,636,1,0,0,0,636,69,1,0,0,0,637,635,1,0,0,0,638,643,3,200,100,0,639,
		640,5,54,0,0,640,642,3,200,100,0,641,639,1,0,0,0,642,645,1,0,0,0,643,641,
		1,0,0,0,643,644,1,0,0,0,644,71,1,0,0,0,645,643,1,0,0,0,646,647,5,24,0,
		0,647,652,3,200,100,0,648,649,5,59,0,0,649,651,3,200,100,0,650,648,1,0,
		0,0,651,654,1,0,0,0,652,650,1,0,0,0,652,653,1,0,0,0,653,73,1,0,0,0,654,
		652,1,0,0,0,655,656,5,32,0,0,656,661,3,200,100,0,657,658,5,59,0,0,658,
		660,3,200,100,0,659,657,1,0,0,0,660,663,1,0,0,0,661,659,1,0,0,0,661,662,
		1,0,0,0,662,75,1,0,0,0,663,661,1,0,0,0,664,665,5,8,0,0,665,668,3,174,87,
		0,666,667,5,59,0,0,667,669,3,174,87,0,668,666,1,0,0,0,668,669,1,0,0,0,
		669,77,1,0,0,0,670,681,3,82,41,0,671,681,3,84,42,0,672,681,3,86,43,0,673,
		681,3,88,44,0,674,681,3,90,45,0,675,681,3,14,7,0,676,681,3,218,109,0,677,
		681,3,10,5,0,678,681,3,80,40,0,679,681,3,98,49,0,680,670,1,0,0,0,680,671,
		1,0,0,0,680,672,1,0,0,0,680,673,1,0,0,0,680,674,1,0,0,0,680,675,1,0,0,
		0,680,676,1,0,0,0,680,677,1,0,0,0,680,678,1,0,0,0,680,679,1,0,0,0,681,
		79,1,0,0,0,682,686,5,9,0,0,683,687,3,14,7,0,684,687,3,90,45,0,685,687,
		3,86,43,0,686,683,1,0,0,0,686,684,1,0,0,0,686,685,1,0,0,0,687,81,1,0,0,
		0,688,689,5,25,0,0,689,690,3,174,87,0,690,691,5,60,0,0,691,699,3,96,48,
		0,692,693,5,17,0,0,693,694,3,174,87,0,694,695,5,60,0,0,695,696,3,96,48,
		0,696,698,1,0,0,0,697,692,1,0,0,0,698,701,1,0,0,0,699,697,1,0,0,0,699,
		700,1,0,0,0,700,705,1,0,0,0,701,699,1,0,0,0,702,703,5,18,0,0,703,704,5,
		60,0,0,704,706,3,96,48,0,705,702,1,0,0,0,705,706,1,0,0,0,706,83,1,0,0,
		0,707,708,5,41,0,0,708,709,3,174,87,0,709,710,5,60,0,0,710,714,3,96,48,
		0,711,712,5,18,0,0,712,713,5,60,0,0,713,715,3,96,48,0,714,711,1,0,0,0,
		714,715,1,0,0,0,715,85,1,0,0,0,716,717,5,22,0,0,717,718,3,212,106,0,718,
		719,5,27,0,0,719,720,3,214,107,0,720,721,5,60,0,0,721,725,3,96,48,0,722,
		723,5,18,0,0,723,724,5,60,0,0,724,726,3,96,48,0,725,722,1,0,0,0,725,726,
		1,0,0,0,726,87,1,0,0,0,727,728,5,39,0,0,728,729,5,60,0,0,729,751,3,96,
		48,0,730,731,3,94,47,0,731,732,5,60,0,0,732,733,3,96,48,0,733,735,1,0,
		0,0,734,730,1,0,0,0,735,736,1,0,0,0,736,734,1,0,0,0,736,737,1,0,0,0,737,
		741,1,0,0,0,738,739,5,18,0,0,739,740,5,60,0,0,740,742,3,96,48,0,741,738,
		1,0,0,0,741,742,1,0,0,0,742,746,1,0,0,0,743,744,5,21,0,0,744,745,5,60,
		0,0,745,747,3,96,48,0,746,743,1,0,0,0,746,747,1,0,0,0,747,752,1,0,0,0,
		748,749,5,21,0,0,749,750,5,60,0,0,750,752,3,96,48,0,751,734,1,0,0,0,751,
		748,1,0,0,0,752,89,1,0,0,0,753,754,5,42,0,0,754,759,3,92,46,0,755,756,
		5,59,0,0,756,758,3,92,46,0,757,755,1,0,0,0,758,761,1,0,0,0,759,757,1,0,
		0,0,759,760,1,0,0,0,760,762,1,0,0,0,761,759,1,0,0,0,762,763,5,60,0,0,763,
		764,3,96,48,0,764,91,1,0,0,0,765,768,3,174,87,0,766,767,5,7,0,0,767,769,
		3,194,97,0,768,766,1,0,0,0,768,769,1,0,0,0,769,93,1,0,0,0,770,776,5,19,
		0,0,771,774,3,174,87,0,772,773,5,7,0,0,773,775,3,200,100,0,774,772,1,0,
		0,0,774,775,1,0,0,0,775,777,1,0,0,0,776,771,1,0,0,0,776,777,1,0,0,0,777,
		95,1,0,0,0,778,789,3,28,14,0,779,780,5,44,0,0,780,782,5,1,0,0,781,783,
		3,26,13,0,782,781,1,0,0,0,783,784,1,0,0,0,784,782,1,0,0,0,784,785,1,0,
		0,0,785,786,1,0,0,0,786,787,5,2,0,0,787,789,1,0,0,0,788,778,1,0,0,0,788,
		779,1,0,0,0,789,97,1,0,0,0,790,791,5,30,0,0,791,792,3,100,50,0,792,793,
		5,60,0,0,793,794,5,44,0,0,794,796,5,1,0,0,795,797,3,106,53,0,796,795,1,
		0,0,0,797,798,1,0,0,0,798,796,1,0,0,0,798,799,1,0,0,0,799,800,1,0,0,0,
		800,801,5,2,0,0,801,99,1,0,0,0,802,803,3,104,52,0,803,805,5,59,0,0,804,
		806,3,102,51,0,805,804,1,0,0,0,805,806,1,0,0,0,806,809,1,0,0,0,807,809,
		3,174,87,0,808,802,1,0,0,0,808,807,1,0,0,0,809,101,1,0,0,0,810,812,5,59,
		0,0,811,813,3,104,52,0,812,811,1,0,0,0,813,814,1,0,0,0,814,812,1,0,0,0,
		814,815,1,0,0,0,815,817,1,0,0,0,816,818,5,59,0,0,817,816,1,0,0,0,817,818,
		1,0,0,0,818,103,1,0,0,0,819,820,5,56,0,0,820,823,3,194,97,0,821,823,3,
		174,87,0,822,819,1,0,0,0,822,821,1,0,0,0,823,105,1,0,0,0,824,825,5,12,
		0,0,825,827,3,110,55,0,826,828,3,108,54,0,827,826,1,0,0,0,827,828,1,0,
		0,0,828,829,1,0,0,0,829,830,5,60,0,0,830,831,3,96,48,0,831,107,1,0,0,0,
		832,833,5,25,0,0,833,834,3,174,87,0,834,109,1,0,0,0,835,838,3,150,75,0,
		836,838,3,112,56,0,837,835,1,0,0,0,837,836,1,0,0,0,838,111,1,0,0,0,839,
		842,3,114,57,0,840,842,3,116,58,0,841,839,1,0,0,0,841,840,1,0,0,0,842,
		113,1,0,0,0,843,844,3,116,58,0,844,845,5,7,0,0,845,846,3,136,68,0,846,
		115,1,0,0,0,847,852,3,118,59,0,848,849,5,66,0,0,849,851,3,118,59,0,850,
		848,1,0,0,0,851,854,1,0,0,0,852,850,1,0,0,0,852,853,1,0,0,0,853,117,1,
		0,0,0,854,852,1,0,0,0,855,864,3,120,60,0,856,864,3,134,67,0,857,864,3,
		138,69,0,858,864,3,140,70,0,859,864,3,146,73,0,860,864,3,148,74,0,861,
		864,3,158,79,0,862,864,3,166,83,0,863,855,1,0,0,0,863,856,1,0,0,0,863,
		857,1,0,0,0,863,858,1,0,0,0,863,859,1,0,0,0,863,860,1,0,0,0,863,861,1,
		0,0,0,863,862,1,0,0,0,864,119,1,0,0,0,865,866,3,126,63,0,866,867,4,60,
		0,0,867,874,1,0,0,0,868,874,3,124,62,0,869,874,3,236,118,0,870,874,5,31,
		0,0,871,874,5,38,0,0,872,874,5,20,0,0,873,865,1,0,0,0,873,868,1,0,0,0,
		873,869,1,0,0,0,873,870,1,0,0,0,873,871,1,0,0,0,873,872,1,0,0,0,874,121,
		1,0,0,0,875,876,3,126,63,0,876,877,4,61,1,0,877,884,1,0,0,0,878,884,3,
		124,62,0,879,884,3,236,118,0,880,884,5,31,0,0,881,884,5,38,0,0,882,884,
		5,20,0,0,883,875,1,0,0,0,883,878,1,0,0,0,883,879,1,0,0,0,883,880,1,0,0,
		0,883,881,1,0,0,0,883,882,1,0,0,0,884,123,1,0,0,0,885,886,3,128,64,0,886,
		887,5,71,0,0,887,888,3,132,66,0,888,894,1,0,0,0,889,890,3,128,64,0,890,
		891,5,72,0,0,891,892,3,132,66,0,892,894,1,0,0,0,893,885,1,0,0,0,893,889,
		1,0,0,0,894,125,1,0,0,0,895,899,5,4,0,0,896,897,5,72,0,0,897,899,5,4,0,
		0,898,895,1,0,0,0,898,896,1,0,0,0,899,127,1,0,0,0,900,904,3,130,65,0,901,
		902,5,72,0,0,902,904,3,130,65,0,903,900,1,0,0,0,903,901,1,0,0,0,904,129,
		1,0,0,0,905,906,5,4,0,0,906,131,1,0,0,0,907,908,5,4,0,0,908,133,1,0,0,
		0,909,910,3,136,68,0,910,135,1,0,0,0,911,912,3,200,100,0,912,913,4,68,
		2,0,913,137,1,0,0,0,914,915,5,40,0,0,915,139,1,0,0,0,916,917,3,142,71,
		0,917,918,4,70,3,0,918,141,1,0,0,0,919,922,3,200,100,0,920,921,5,54,0,
		0,921,923,3,200,100,0,922,920,1,0,0,0,923,924,1,0,0,0,924,922,1,0,0,0,
		924,925,1,0,0,0,925,143,1,0,0,0,926,929,3,142,71,0,927,929,3,200,100,0,
		928,926,1,0,0,0,928,927,1,0,0,0,929,145,1,0,0,0,930,931,5,57,0,0,931,932,
		3,112,56,0,932,933,5,58,0,0,933,147,1,0,0,0,934,936,5,64,0,0,935,937,3,
		152,76,0,936,935,1,0,0,0,936,937,1,0,0,0,937,938,1,0,0,0,938,945,5,65,
		0,0,939,941,5,57,0,0,940,942,3,150,75,0,941,940,1,0,0,0,941,942,1,0,0,
		0,942,943,1,0,0,0,943,945,5,58,0,0,944,934,1,0,0,0,944,939,1,0,0,0,945,
		149,1,0,0,0,946,947,3,154,77,0,947,949,5,59,0,0,948,950,3,152,76,0,949,
		948,1,0,0,0,949,950,1,0,0,0,950,151,1,0,0,0,951,956,3,154,77,0,952,953,
		5,59,0,0,953,955,3,154,77,0,954,952,1,0,0,0,955,958,1,0,0,0,956,954,1,
		0,0,0,956,957,1,0,0,0,957,960,1,0,0,0,958,956,1,0,0,0,959,961,5,59,0,0,
		960,959,1,0,0,0,960,961,1,0,0,0,961,153,1,0,0,0,962,965,3,156,78,0,963,
		965,3,112,56,0,964,962,1,0,0,0,964,963,1,0,0,0,965,155,1,0,0,0,966,967,
		5,56,0,0,967,971,3,136,68,0,968,969,5,56,0,0,969,971,3,138,69,0,970,966,
		1,0,0,0,970,968,1,0,0,0,971,157,1,0,0,0,972,973,5,77,0,0,973,998,5,78,
		0,0,974,975,5,77,0,0,975,977,3,164,82,0,976,978,5,59,0,0,977,976,1,0,0,
		0,977,978,1,0,0,0,978,979,1,0,0,0,979,980,5,78,0,0,980,998,1,0,0,0,981,
		982,5,77,0,0,982,983,3,160,80,0,983,984,5,59,0,0,984,986,3,164,82,0,985,
		987,5,59,0,0,986,985,1,0,0,0,986,987,1,0,0,0,987,988,1,0,0,0,988,989,5,
		78,0,0,989,998,1,0,0,0,990,991,5,77,0,0,991,993,3,160,80,0,992,994,5,59,
		0,0,993,992,1,0,0,0,993,994,1,0,0,0,994,995,1,0,0,0,995,996,5,78,0,0,996,
		998,1,0,0,0,997,972,1,0,0,0,997,974,1,0,0,0,997,981,1,0,0,0,997,990,1,
		0,0,0,998,159,1,0,0,0,999,1004,3,162,81,0,1000,1001,5,59,0,0,1001,1003,
		3,162,81,0,1002,1000,1,0,0,0,1003,1006,1,0,0,0,1004,1002,1,0,0,0,1004,
		1005,1,0,0,0,1005,161,1,0,0,0,1006,1004,1,0,0,0,1007,1010,3,122,61,0,1008,
		1010,3,142,71,0,1009,1007,1,0,0,0,1009,1008,1,0,0,0,1010,1011,1,0,0,0,
		1011,1012,5,60,0,0,1012,1013,3,112,56,0,1013,163,1,0,0,0,1014,1015,5,62,
		0,0,1015,1016,3,136,68,0,1016,165,1,0,0,0,1017,1018,3,144,72,0,1018,1019,
		5,57,0,0,1019,1020,5,58,0,0,1020,1048,1,0,0,0,1021,1022,3,144,72,0,1022,
		1023,5,57,0,0,1023,1025,3,168,84,0,1024,1026,5,59,0,0,1025,1024,1,0,0,
		0,1025,1026,1,0,0,0,1026,1027,1,0,0,0,1027,1028,5,58,0,0,1028,1048,1,0,
		0,0,1029,1030,3,144,72,0,1030,1031,5,57,0,0,1031,1033,3,170,85,0,1032,
		1034,5,59,0,0,1033,1032,1,0,0,0,1033,1034,1,0,0,0,1034,1035,1,0,0,0,1035,
		1036,5,58,0,0,1036,1048,1,0,0,0,1037,1038,3,144,72,0,1038,1039,5,57,0,
		0,1039,1040,3,168,84,0,1040,1041,5,59,0,0,1041,1043,3,170,85,0,1042,1044,
		5,59,0,0,1043,1042,1,0,0,0,1043,1044,1,0,0,0,1044,1045,1,0,0,0,1045,1046,
		5,58,0,0,1046,1048,1,0,0,0,1047,1017,1,0,0,0,1047,1021,1,0,0,0,1047,1029,
		1,0,0,0,1047,1037,1,0,0,0,1048,167,1,0,0,0,1049,1054,3,112,56,0,1050,1051,
		5,59,0,0,1051,1053,3,112,56,0,1052,1050,1,0,0,0,1053,1056,1,0,0,0,1054,
		1052,1,0,0,0,1054,1055,1,0,0,0,1055,169,1,0,0,0,1056,1054,1,0,0,0,1057,
		1062,3,172,86,0,1058,1059,5,59,0,0,1059,1061,3,172,86,0,1060,1058,1,0,
		0,0,1061,1064,1,0,0,0,1062,1060,1,0,0,0,1062,1063,1,0,0,0,1063,171,1,0,
		0,0,1064,1062,1,0,0,0,1065,1066,3,200,100,0,1066,1067,5,63,0,0,1067,1068,
		3,112,56,0,1068,173,1,0,0,0,1069,1075,3,182,91,0,1070,1071,5,25,0,0,1071,
		1072,3,182,91,0,1072,1073,5,18,0,0,1073,1074,3,174,87,0,1074,1076,1,0,
		0,0,1075,1070,1,0,0,0,1075,1076,1,0,0,0,1076,1079,1,0,0,0,1077,1079,3,
		178,89,0,1078,1069,1,0,0,0,1078,1077,1,0,0,0,1079,175,1,0,0,0,1080,1083,
		3,182,91,0,1081,1083,3,180,90,0,1082,1080,1,0,0,0,1082,1081,1,0,0,0,1083,
		177,1,0,0,0,1084,1086,5,29,0,0,1085,1087,3,22,11,0,1086,1085,1,0,0,0,1086,
		1087,1,0,0,0,1087,1088,1,0,0,0,1088,1089,5,60,0,0,1089,1090,3,174,87,0,
		1090,179,1,0,0,0,1091,1093,5,29,0,0,1092,1094,3,22,11,0,1093,1092,1,0,
		0,0,1093,1094,1,0,0,0,1094,1095,1,0,0,0,1095,1096,5,60,0,0,1096,1097,3,
		176,88,0,1097,181,1,0,0,0,1098,1103,3,184,92,0,1099,1100,5,34,0,0,1100,
		1102,3,184,92,0,1101,1099,1,0,0,0,1102,1105,1,0,0,0,1103,1101,1,0,0,0,
		1103,1104,1,0,0,0,1104,183,1,0,0,0,1105,1103,1,0,0,0,1106,1111,3,186,93,
		0,1107,1108,5,6,0,0,1108,1110,3,186,93,0,1109,1107,1,0,0,0,1110,1113,1,
		0,0,0,1111,1109,1,0,0,0,1111,1112,1,0,0,0,1112,185,1,0,0,0,1113,1111,1,
		0,0,0,1114,1115,5,33,0,0,1115,1118,3,186,93,0,1116,1118,3,188,94,0,1117,
		1114,1,0,0,0,1117,1116,1,0,0,0,1118,187,1,0,0,0,1119,1125,3,194,97,0,1120,
		1121,3,190,95,0,1121,1122,3,194,97,0,1122,1124,1,0,0,0,1123,1120,1,0,0,
		0,1124,1127,1,0,0,0,1125,1123,1,0,0,0,1125,1126,1,0,0,0,1126,189,1,0,0,
		0,1127,1125,1,0,0,0,1128,1142,5,79,0,0,1129,1142,5,80,0,0,1130,1142,5,
		81,0,0,1131,1142,5,82,0,0,1132,1142,5,83,0,0,1133,1142,5,84,0,0,1134,1142,
		5,85,0,0,1135,1142,5,27,0,0,1136,1137,5,33,0,0,1137,1142,5,27,0,0,1138,
		1142,5,28,0,0,1139,1140,5,28,0,0,1140,1142,5,33,0,0,1141,1128,1,0,0,0,
		1141,1129,1,0,0,0,1141,1130,1,0,0,0,1141,1131,1,0,0,0,1141,1132,1,0,0,
		0,1141,1133,1,0,0,0,1141,1134,1,0,0,0,1141,1135,1,0,0,0,1141,1136,1,0,
		0,0,1141,1138,1,0,0,0,1141,1139,1,0,0,0,1142,191,1,0,0,0,1143,1144,5,56,
		0,0,1144,1145,3,194,97,0,1145,193,1,0,0,0,1146,1147,6,97,-1,0,1147,1155,
		3,196,98,0,1148,1150,7,2,0,0,1149,1148,1,0,0,0,1150,1151,1,0,0,0,1151,
		1149,1,0,0,0,1151,1152,1,0,0,0,1152,1153,1,0,0,0,1153,1155,3,194,97,7,
		1154,1146,1,0,0,0,1154,1149,1,0,0,0,1155,1179,1,0,0,0,1156,1157,10,8,0,
		0,1157,1158,5,62,0,0,1158,1178,3,194,97,9,1159,1160,10,6,0,0,1160,1161,
		7,3,0,0,1161,1178,3,194,97,7,1162,1163,10,5,0,0,1163,1164,7,4,0,0,1164,
		1178,3,194,97,6,1165,1166,10,4,0,0,1166,1167,7,5,0,0,1167,1178,3,194,97,
		5,1168,1169,10,3,0,0,1169,1170,5,68,0,0,1170,1178,3,194,97,4,1171,1172,
		10,2,0,0,1172,1173,5,67,0,0,1173,1178,3,194,97,3,1174,1175,10,1,0,0,1175,
		1176,5,66,0,0,1176,1178,3,194,97,2,1177,1156,1,0,0,0,1177,1159,1,0,0,0,
		1177,1162,1,0,0,0,1177,1165,1,0,0,0,1177,1168,1,0,0,0,1177,1171,1,0,0,
		0,1177,1174,1,0,0,0,1178,1181,1,0,0,0,1179,1177,1,0,0,0,1179,1180,1,0,
		0,0,1180,195,1,0,0,0,1181,1179,1,0,0,0,1182,1184,5,10,0,0,1183,1182,1,
		0,0,0,1183,1184,1,0,0,0,1184,1185,1,0,0,0,1185,1189,3,198,99,0,1186,1188,
		3,204,102,0,1187,1186,1,0,0,0,1188,1191,1,0,0,0,1189,1187,1,0,0,0,1189,
		1190,1,0,0,0,1190,197,1,0,0,0,1191,1189,1,0,0,0,1192,1195,5,57,0,0,1193,
		1196,3,232,116,0,1194,1196,3,202,101,0,1195,1193,1,0,0,0,1195,1194,1,0,
		0,0,1195,1196,1,0,0,0,1196,1197,1,0,0,0,1197,1220,5,58,0,0,1198,1200,5,
		64,0,0,1199,1201,3,202,101,0,1200,1199,1,0,0,0,1200,1201,1,0,0,0,1201,
		1202,1,0,0,0,1202,1220,5,65,0,0,1203,1205,5,77,0,0,1204,1206,3,216,108,
		0,1205,1204,1,0,0,0,1205,1206,1,0,0,0,1206,1207,1,0,0,0,1207,1220,5,78,
		0,0,1208,1220,3,200,100,0,1209,1220,5,4,0,0,1210,1212,5,3,0,0,1211,1210,
		1,0,0,0,1212,1213,1,0,0,0,1213,1211,1,0,0,0,1213,1214,1,0,0,0,1214,1220,
		1,0,0,0,1215,1220,5,55,0,0,1216,1220,5,31,0,0,1217,1220,5,38,0,0,1218,
		1220,5,20,0,0,1219,1192,1,0,0,0,1219,1198,1,0,0,0,1219,1203,1,0,0,0,1219,
		1208,1,0,0,0,1219,1209,1,0,0,0,1219,1211,1,0,0,0,1219,1215,1,0,0,0,1219,
		1216,1,0,0,0,1219,1217,1,0,0,0,1219,1218,1,0,0,0,1220,199,1,0,0,0,1221,
		1222,7,6,0,0,1222,201,1,0,0,0,1223,1226,3,174,87,0,1224,1226,3,192,96,
		0,1225,1223,1,0,0,0,1225,1224,1,0,0,0,1226,1241,1,0,0,0,1227,1242,3,226,
		113,0,1228,1231,5,59,0,0,1229,1232,3,174,87,0,1230,1232,3,192,96,0,1231,
		1229,1,0,0,0,1231,1230,1,0,0,0,1232,1234,1,0,0,0,1233,1228,1,0,0,0,1234,
		1237,1,0,0,0,1235,1233,1,0,0,0,1235,1236,1,0,0,0,1236,1239,1,0,0,0,1237,
		1235,1,0,0,0,1238,1240,5,59,0,0,1239,1238,1,0,0,0,1239,1240,1,0,0,0,1240,
		1242,1,0,0,0,1241,1227,1,0,0,0,1241,1235,1,0,0,0,1242,203,1,0,0,0,1243,
		1245,5,57,0,0,1244,1246,3,220,110,0,1245,1244,1,0,0,0,1245,1246,1,0,0,
		0,1246,1247,1,0,0,0,1247,1255,5,58,0,0,1248,1249,5,64,0,0,1249,1250,3,
		206,103,0,1250,1251,5,65,0,0,1251,1255,1,0,0,0,1252,1253,5,54,0,0,1253,
		1255,3,200,100,0,1254,1243,1,0,0,0,1254,1248,1,0,0,0,1254,1252,1,0,0,0,
		1255,205,1,0,0,0,1256,1261,3,208,104,0,1257,1258,5,59,0,0,1258,1260,3,
		208,104,0,1259,1257,1,0,0,0,1260,1263,1,0,0,0,1261,1259,1,0,0,0,1261,1262,
		1,0,0,0,1262,1265,1,0,0,0,1263,1261,1,0,0,0,1264,1266,5,59,0,0,1265,1264,
		1,0,0,0,1265,1266,1,0,0,0,1266,207,1,0,0,0,1267,1279,3,174,87,0,1268,1270,
		3,174,87,0,1269,1268,1,0,0,0,1269,1270,1,0,0,0,1270,1271,1,0,0,0,1271,
		1273,5,60,0,0,1272,1274,3,174,87,0,1273,1272,1,0,0,0,1273,1274,1,0,0,0,
		1274,1276,1,0,0,0,1275,1277,3,210,105,0,1276,1275,1,0,0,0,1276,1277,1,
		0,0,0,1277,1279,1,0,0,0,1278,1267,1,0,0,0,1278,1269,1,0,0,0,1279,209,1,
		0,0,0,1280,1282,5,60,0,0,1281,1283,3,174,87,0,1282,1281,1,0,0,0,1282,1283,
		1,0,0,0,1283,211,1,0,0,0,1284,1287,3,194,97,0,1285,1287,3,192,96,0,1286,
		1284,1,0,0,0,1286,1285,1,0,0,0,1287,1295,1,0,0,0,1288,1291,5,59,0,0,1289,
		1292,3,194,97,0,1290,1292,3,192,96,0,1291,1289,1,0,0,0,1291,1290,1,0,0,
		0,1292,1294,1,0,0,0,1293,1288,1,0,0,0,1294,1297,1,0,0,0,1295,1293,1,0,
		0,0,1295,1296,1,0,0,0,1296,1299,1,0,0,0,1297,1295,1,0,0,0,1298,1300,5,
		59,0,0,1299,1298,1,0,0,0,1299,1300,1,0,0,0,1300,213,1,0,0,0,1301,1306,
		3,174,87,0,1302,1303,5,59,0,0,1303,1305,3,174,87,0,1304,1302,1,0,0,0,1305,
		1308,1,0,0,0,1306,1304,1,0,0,0,1306,1307,1,0,0,0,1307,1310,1,0,0,0,1308,
		1306,1,0,0,0,1309,1311,5,59,0,0,1310,1309,1,0,0,0,1310,1311,1,0,0,0,1311,
		215,1,0,0,0,1312,1313,3,174,87,0,1313,1314,5,60,0,0,1314,1315,3,174,87,
		0,1315,1319,1,0,0,0,1316,1317,5,62,0,0,1317,1319,3,194,97,0,1318,1312,
		1,0,0,0,1318,1316,1,0,0,0,1319,1338,1,0,0,0,1320,1339,3,226,113,0,1321,
		1328,5,59,0,0,1322,1323,3,174,87,0,1323,1324,5,60,0,0,1324,1325,3,174,
		87,0,1325,1329,1,0,0,0,1326,1327,5,62,0,0,1327,1329,3,194,97,0,1328,1322,
		1,0,0,0,1328,1326,1,0,0,0,1329,1331,1,0,0,0,1330,1321,1,0,0,0,1331,1334,
		1,0,0,0,1332,1330,1,0,0,0,1332,1333,1,0,0,0,1333,1336,1,0,0,0,1334,1332,
		1,0,0,0,1335,1337,5,59,0,0,1336,1335,1,0,0,0,1336,1337,1,0,0,0,1337,1339,
		1,0,0,0,1338,1320,1,0,0,0,1338,1332,1,0,0,0,1339,1361,1,0,0,0,1340,1343,
		3,174,87,0,1341,1343,3,192,96,0,1342,1340,1,0,0,0,1342,1341,1,0,0,0,1343,
		1358,1,0,0,0,1344,1359,3,226,113,0,1345,1348,5,59,0,0,1346,1349,3,174,
		87,0,1347,1349,3,192,96,0,1348,1346,1,0,0,0,1348,1347,1,0,0,0,1349,1351,
		1,0,0,0,1350,1345,1,0,0,0,1351,1354,1,0,0,0,1352,1350,1,0,0,0,1352,1353,
		1,0,0,0,1353,1356,1,0,0,0,1354,1352,1,0,0,0,1355,1357,5,59,0,0,1356,1355,
		1,0,0,0,1356,1357,1,0,0,0,1357,1359,1,0,0,0,1358,1344,1,0,0,0,1358,1352,
		1,0,0,0,1359,1361,1,0,0,0,1360,1318,1,0,0,0,1360,1342,1,0,0,0,1361,217,
		1,0,0,0,1362,1363,5,13,0,0,1363,1369,3,200,100,0,1364,1366,5,57,0,0,1365,
		1367,3,220,110,0,1366,1365,1,0,0,0,1366,1367,1,0,0,0,1367,1368,1,0,0,0,
		1368,1370,5,58,0,0,1369,1364,1,0,0,0,1369,1370,1,0,0,0,1370,1371,1,0,0,
		0,1371,1372,5,60,0,0,1372,1373,3,96,48,0,1373,219,1,0,0,0,1374,1379,3,
		222,111,0,1375,1376,5,59,0,0,1376,1378,3,222,111,0,1377,1375,1,0,0,0,1378,
		1381,1,0,0,0,1379,1377,1,0,0,0,1379,1380,1,0,0,0,1380,1383,1,0,0,0,1381,
		1379,1,0,0,0,1382,1384,5,59,0,0,1383,1382,1,0,0,0,1383,1384,1,0,0,0,1384,
		221,1,0,0,0,1385,1387,3,174,87,0,1386,1388,3,226,113,0,1387,1386,1,0,0,
		0,1387,1388,1,0,0,0,1388,1398,1,0,0,0,1389,1390,3,174,87,0,1390,1391,5,
		63,0,0,1391,1392,3,174,87,0,1392,1398,1,0,0,0,1393,1394,5,62,0,0,1394,
		1398,3,174,87,0,1395,1396,5,56,0,0,1396,1398,3,174,87,0,1397,1385,1,0,
		0,0,1397,1389,1,0,0,0,1397,1393,1,0,0,0,1397,1395,1,0,0,0,1398,223,1,0,
		0,0,1399,1402,3,226,113,0,1400,1402,3,228,114,0,1401,1399,1,0,0,0,1401,
		1400,1,0,0,0,1402,225,1,0,0,0,1403,1405,5,9,0,0,1404,1403,1,0,0,0,1404,
		1405,1,0,0,0,1405,1406,1,0,0,0,1406,1407,5,22,0,0,1407,1408,3,212,106,
		0,1408,1409,5,27,0,0,1409,1411,3,182,91,0,1410,1412,3,224,112,0,1411,1410,
		1,0,0,0,1411,1412,1,0,0,0,1412,227,1,0,0,0,1413,1414,5,25,0,0,1414,1416,
		3,176,88,0,1415,1417,3,224,112,0,1416,1415,1,0,0,0,1416,1417,1,0,0,0,1417,
		229,1,0,0,0,1418,1419,3,200,100,0,1419,231,1,0,0,0,1420,1422,5,43,0,0,
		1421,1423,3,234,117,0,1422,1421,1,0,0,0,1422,1423,1,0,0,0,1423,233,1,0,
		0,0,1424,1425,5,23,0,0,1425,1428,3,174,87,0,1426,1428,3,214,107,0,1427,
		1424,1,0,0,0,1427,1426,1,0,0,0,1428,235,1,0,0,0,1429,1431,5,3,0,0,1430,
		1429,1,0,0,0,1431,1432,1,0,0,0,1432,1430,1,0,0,0,1432,1433,1,0,0,0,1433,
		237,1,0,0,0,201,243,247,249,258,267,270,277,283,293,300,307,313,317,323,
		329,333,340,342,344,349,351,353,357,363,367,374,376,378,383,385,390,395,
		401,405,411,417,421,428,430,432,437,439,441,445,451,455,462,464,466,471,
		473,479,486,490,502,509,514,518,521,527,531,536,540,544,558,566,574,576,
		580,589,596,598,607,612,617,624,628,635,643,652,661,668,680,686,699,705,
		714,725,736,741,746,751,759,768,774,776,784,788,798,805,808,814,817,822,
		827,837,841,852,863,873,883,893,898,903,924,928,936,941,944,949,956,960,
		964,970,977,986,993,997,1004,1009,1025,1033,1043,1047,1054,1062,1075,1078,
		1082,1086,1093,1103,1111,1117,1125,1141,1151,1154,1177,1179,1183,1189,
		1195,1200,1205,1213,1219,1225,1231,1235,1239,1241,1245,1254,1261,1265,
		1269,1273,1276,1278,1282,1286,1291,1295,1299,1306,1310,1318,1328,1332,
		1336,1338,1342,1348,1352,1356,1358,1360,1366,1369,1379,1383,1387,1397,
		1401,1404,1411,1416,1422,1427,1432
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Python.Antlr
